[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 2.1_The two generals problem.mp4
Video File: 2.1_The two generals problem.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 164
Active Line: 171
Video Position: 19044

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:00.90,0:00:02.48,Default,,0,0,0,,大家好 欢迎大家回来\NHello, everybody, welcome back.
Dialogue: 0,0:00:02.48,0:00:05.70,Default,,0,0,0,,在上节课中 我们用网站和RPC等例子\NIn the last lecture, we introduced distributed systems
Dialogue: 0,0:00:05.70,0:00:09.74,Default,,0,0,0,,向大家介绍了分布式系统的概念\Nby looking at some concrete examples such as the web and RPC,
Dialogue: 0,0:00:09.74,0:00:12.68,Default,,0,0,0,,这两个例子都是客户端/服务端系统\Nwhich are examples of client/server systems.
Dialogue: 0,0:00:12.68,0:00:15.48,Default,,0,0,0,,在本节课中 我们将把目光转向\NIn this lecture, we're going to move things to
Dialogue: 0,0:00:15.48,0:00:19.20,Default,,0,0,0,,更抽象、更泛化的分布式系统模型上\Na little bit more abstract and a little bit more general model.
Dialogue: 0,0:00:19.20,0:00:22.82,Default,,0,0,0,,我们将介绍分布式系统的系统模型\NAnd we're going to talk about system models for distributed systems
Dialogue: 0,0:00:22.82,0:00:27.32,Default,,0,0,0,,系统模型指的是分布式系统所满足的假设\Nwhich are descriptions of the assumptions that we make
Dialogue: 0,0:00:27.32,0:00:31.08,Default,,0,0,0,,我们要根据这些假设设计适用于分布式系统的算法\Nwhen we're designing an algorithm to run in a distributed system.
Dialogue: 0,0:00:31.08,0:00:33.84,Default,,0,0,0,,系统模型非常重要\NSo, a system model is very important,
Dialogue: 0,0:00:33.84,0:00:38.14,Default,,0,0,0,,我们前面讨论过 分布式系统中会出现很多可能的错误\Nbecause as we discussed, things can go wrong in the distributed systems.
Dialogue: 0,0:00:38.14,0:00:41.34,Default,,0,0,0,,节点可能会崩溃 网络可能会故障等\NNodes can crash, networks can fail, and so on.
Dialogue: 0,0:00:41.34,0:00:46.06,Default,,0,0,0,,我们需要准确作出假设 哪些故障情况是可能发生的\NAnd we have to be precise about what failures we are assuming are possible,
Dialogue: 0,0:00:46.06,0:00:49.12,Default,,0,0,0,,哪些故障是不可能发生的\Nand what failures we are assuming are not possible.
Dialogue: 0,0:00:49.12,0:00:51.34,Default,,0,0,0,,为了引入系统模型的定义\NSo, we're going to start this
Dialogue: 0,0:00:51.34,0:00:56.54,Default,,0,0,0,,我们先来看看分布式系统中的两个经典思想实验\Nby looking at two classic thought experiments from distributed systems.
Dialogue: 0,0:00:56.54,0:00:59.46,Default,,0,0,0,,它们分别是两将军问题、拜占庭将军问题\NThe two generals problem and the byzantine generals problem.
Dialogue: 0,0:00:59.46,0:01:02.64,Default,,0,0,0,,我们先来讲解两将军问题\NAnd we're going to start now with the two generals problem.
Dialogue: 0,0:01:02.64,0:01:05.98,Default,,0,0,0,,两将军问题是用军队打仗的故事来描述的\NSo, this is kind of like a military analogy.
Dialogue: 0,0:01:05.98,0:01:08.48,Default,,0,0,0,,很抱歉 我不是一个军事迷\NI'm sorry about that. I'm not really a big fan of that.
Dialogue: 0,0:01:08.48,0:01:11.78,Default,,0,0,0,,但这个问题就是在军队打仗的背景下描述的\NBut it's widely known as the two generals problem.
Dialogue: 0,0:01:11.78,0:01:15.06,Default,,0,0,0,,因此我这里也遵守惯例\NSo, I'm just going to stick with the convention here.
Dialogue: 0,0:01:15.06,0:01:18.56,Default,,0,0,0,,这个思想实验的所描述的场景是\NAnd so, the setting of this thought experiment is that
Dialogue: 0,0:01:18.56,0:01:22.48,Default,,0,0,0,,我们有两支军队每个军队都由一位将军所率领\Nwe have two armies, each army is controlled by one general.
Dialogue: 0,0:01:22.48,0:01:27.54,Default,,0,0,0,,这两个军队希望进攻并占领一座城市\NAnd these armies are wanting to attack and capture a city.
Dialogue: 0,0:01:27.54,0:01:30.96,Default,,0,0,0,,这个城市防守严密\NNow, the city is well-defended.
Dialogue: 0,0:01:30.96,0:01:37.10,Default,,0,0,0,,如果同一时间只有一支军队发起进攻 则这只军队会吃败仗\NAnd so, if only one of the armies attacks at one time, that army will get defeated.
Dialogue: 0,0:01:37.10,0:01:38.80,Default,,0,0,0,,因此 很重要的一点是\NAnd so, it's very important that
Dialogue: 0,0:01:38.80,0:01:42.60,Default,,0,0,0,,两位将军都需要发起进攻 两只军队需要同时发起进攻\Nif the two generals are going to attack, they attack at the same time,
Dialogue: 0,0:01:42.60,0:01:45.16,Default,,0,0,0,,如果两支军队同时发起进攻\Nbecause then if both the armies attack at the same time,
Dialogue: 0,0:01:45.16,0:01:47.10,Default,,0,0,0,,则他们就可以获得胜利\Nthey know that they are going to win.
Dialogue: 0,0:01:47.10,0:01:50.54,Default,,0,0,0,,大家可以从这里的真值表看到\NSo, you can see from this truth table here what happens is
Dialogue: 0,0:01:50.54,0:01:54.16,Default,,0,0,0,,如果两支军队都不发起进攻 那结果也还能接受\NOK, it's alright if neither of the two armies attacks,
Dialogue: 0,0:01:54.16,0:01:59.50,Default,,0,0,0,,但如果只有一支军队发起进攻 那事情就变得麻烦了\Nbut if only one of the two armies attacks, then it's all going to go terribly wrong.
Dialogue: 0,0:02:00.16,0:02:06.32,Default,,0,0,0,,我们希望做到的是 当且仅当另一只军队发起进攻时 自己军队才发起进攻\NSo, what we really want is that one army attacks if and only if the other army attacks.
Dialogue: 0,0:02:06.32,0:02:08.82,Default,,0,0,0,,这样两支军队才能一起进攻\NSo, both armies attack together.
Dialogue: 0,0:02:08.82,0:02:11.60,Default,,0,0,0,,这里的难点在于\NNow, what makes this difficult is that
Dialogue: 0,0:02:11.60,0:02:16.50,Default,,0,0,0,,两位将军无法直接交流并讨论要在什么时候一起进攻\Nthe two generals can't just talk to each other and agree on their plan of when to attack,
Dialogue: 0,0:02:16.50,0:02:19.34,Default,,0,0,0,,他们只能通过信使沟通\Nbut they can only communicate via messengers.
Dialogue: 0,0:02:19.34,0:02:20.94,Default,,0,0,0,,这些信使很辛苦\NAnd so, these messengers,
Dialogue: 0,0:02:20.94,0:02:25.34,Default,,0,0,0,,他们要穿梭在丛林中 为两位将军传递信息\Nthere are people who run with the messengers through the forest,
Dialogue: 0,0:02:25.34,0:02:32.60,Default,,0,0,0,,当他们穿梭在丛林中时 他们可能会被城市的守军抓住\Nand as they run through the forest, they might get captured by forces of the city.
Dialogue: 0,0:02:32.60,0:02:38.42,Default,,0,0,0,,因此 当一位将军向另一位将军派出一位信使时\NAnd so, whenever one of the generals sends a messenger to the other general,
Dialogue: 0,0:02:38.42,0:02:40.80,Default,,0,0,0,,消息并不一定能传递到另一位将军手中\Nthat message may or may not get through.
Dialogue: 0,0:02:40.80,0:02:44.22,Default,,0,0,0,,发送消息的一方没有任何办法知道\NAnd there's no way for the sender of the message to know
Dialogue: 0,0:02:44.22,0:02:45.96,Default,,0,0,0,,消息是否能成功发送出去\Nwhether the message got through
Dialogue: 0,0:02:45.96,0:02:48.48,Default,,0,0,0,,只有当收到响应时 才能获知消息发送结果\Nexcept by receiving a response.
Dialogue: 0,0:02:48.48,0:02:51.88,Default,,0,0,0,,我们现在面对的问题是这样的\NAnd so, the problem here is now this.
Dialogue: 0,0:02:51.88,0:02:57.00,Default,,0,0,0,,举例来说 想象将军1已经决定要在11月10日发起进攻\NSo, imagine, for example, general 1 has decided to attack on the 10th of November.
Dialogue: 0,0:02:57.00,0:03:01.86,Default,,0,0,0,,因此 他向将军2发送一条消息称\NAnd so, he sends a message to general 2, saying
Dialogue: 0,0:03:01.86,0:03:04.68,Default,,0,0,0,,“我们要在11月10日发起进攻了 你能发起进攻吗？”\N“We're going to attack on the 10th November, are you OK with that?”
Dialogue: 0,0:03:05.10,0:03:07.04,Default,,0,0,0,,将军2收到了消息后会说\NAnd general 2 receives the message and says,
Dialogue: 0,0:03:07.04,0:03:11.08,Default,,0,0,0,,“好的 我没问题 我们一起在11月10日发起进攻吧”\N“Yes, I'm on board, we're going to attack together on the 10th of November”,
Dialogue: 0,0:03:11.08,0:03:12.66,Default,,0,0,0,,并把响应发送回去\Nsends that response back.
Dialogue: 0,0:03:12.66,0:03:15.74,Default,,0,0,0,,但很不幸的是 响应消息被截获了\NBut unfortunately, the response message is captured.
Dialogue: 0,0:03:15.74,0:03:20.32,Default,,0,0,0,,此时 初始的请求消息发送成功 但响应消息丢失了\NSo, the initial message, the request gets through, but the response is lost.
Dialogue: 0,0:03:20.32,0:03:24.02,Default,,0,0,0,,此时 将军1没有收到响应\NAnd so, now, general 1 does not receive a response.
Dialogue: 0,0:03:24.02,0:03:28.46,Default,,0,0,0,,这是其中一种可能发生的情况\NNow, this is one scenario of what could happen.
Dialogue: 0,0:03:28.46,0:03:30.62,Default,,0,0,0,,还有另一种可能发生的情况\NHere's another scenario of what could happen.
Dialogue: 0,0:03:30.62,0:03:31.46,Default,,0,0,0,,另一种可能发生的情况是\NIt could also happen that
Dialogue: 0,0:03:31.46,0:03:35.90,Default,,0,0,0,,将军1向将军2发送消息“在11月10日发起进攻”\Ngeneral 1 sends the message “Attack on the 10th of November” to general 2.
Dialogue: 0,0:03:35.90,0:03:39.88,Default,,0,0,0,,但初始消息就丢失了 没有发送到将军2那里\NBut that initial message is lost and never gets through to general 2.
Dialogue: 0,0:03:39.88,0:03:45.56,Default,,0,0,0,,现在 将军2没有收到任何消息 因此他也不会响应消息\NAnd now, general 2 doesn't receive any message. So, he's not going to respond either.
Dialogue: 0,0:03:45.56,0:03:50.70,Default,,0,0,0,,但此时的最终结果仍然是将军1没有收到响应\NAnd the end result is also the general 1 does not receive a response.
Dialogue: 0,0:03:50.70,0:03:57.98,Default,,0,0,0,,因此 在这两种情况下 将军1只能观察到一种结果：没有收到响应\NSo, in both of these two cases, the only thing that general 1 observes is no response.
Dialogue: 0,0:03:57.98,0:04:01.88,Default,,0,0,0,,但是将军1不知道没有收到响应的原因是什么\NBut general 1 does not know whether there's no response,
Dialogue: 0,0:04:01.88,0:04:05.52,Default,,0,0,0,,可能是初始消息就没有发送过去 也可能是响应消息丢失了\Nbecause the initial message didn't get through, or whether the response was lost.
Dialogue: 0,0:04:05.52,0:04:07.70,Default,,0,0,0,,但这两种情况有一个很大的不同点\NBut there's a big difference between the two of these,
Dialogue: 0,0:04:07.70,0:04:10.06,Default,,0,0,0,,从将军2的视角看\Nbecause from general 2 point of view,
Dialogue: 0,0:04:10.06,0:04:12.82,Default,,0,0,0,,第一种情况下 将军2已经同意共同发起进攻\Nin the first case, general 2 has agreed to attack,
Dialogue: 0,0:04:12.82,0:04:15.96,Default,,0,0,0,,第二种情况下 将军2甚至不知道要发起进攻了\Nin the second case, general 2 doesn't even know about the attack.
Dialogue: 0,0:04:15.96,0:04:23.58,Default,,0,0,0,,因此 从将军1的视角看 两种情况的结果是一样的\NSo, they look the same from general 1’s point of view,
Dialogue: 0,0:04:23.58,0:04:26.96,Default,,0,0,0,,从将军2的视角看 两种情况的结果是不一样的\Nthey look very different from general 2's point of view.
Dialogue: 0,0:04:26.96,0:04:29.44,Default,,0,0,0,,我们现在来尝试设计一个算法\NSo, let's try to design an algorithm,
Dialogue: 0,0:04:29.44,0:04:32.62,Default,,0,0,0,,帮助两位将军在这种场景下成功协调进攻时间\Nwhich will nevertheless get the two generals into agreement.
Dialogue: 0,0:04:32.62,0:04:36.94,Default,,0,0,0,,我们先从将军1的角度来研究一下这个问题\NAnd so, let's think about it first of all from the point of view of general 1.
Dialogue: 0,0:04:36.94,0:04:40.14,Default,,0,0,0,,将军1基本上只有两种可能的选择\NGeneral 1 basically has two choices,
Dialogue: 0,0:04:40.14,0:04:46.16,Default,,0,0,0,,将军1可以这样选择：不管是否收到响应 总发起进攻\Neither general 1 is going to always attack no matter whether any response is received,
Dialogue: 0,0:04:46.16,0:04:52.30,Default,,0,0,0,,将军1也可以这样选择：仅当收到将军2的响应后再发起进攻\Nor general 1 is going to wait and only attack if it receives a response from general 2.
Dialogue: 0,0:04:52.30,0:04:53.78,Default,,0,0,0,,我们先来讨论第一种选择\NSo, let's start with the first case.
Dialogue: 0,0:04:53.78,0:04:57.94,Default,,0,0,0,,第一种选择下 不管是否收到响应 将军1都会发起进攻\NSo, general 1 always attacks even if no response is received.
Dialogue: 0,0:04:57.94,0:05:03.52,Default,,0,0,0,,这种情况下 将军1希望确定将军2也会发起进攻\NSo, in this case, general 1 wants to make sure that general 2 is also going to attack,
Dialogue: 0,0:05:03.52,0:05:09.04,Default,,0,0,0,,否则 将军1就会面临困境\Nbecause otherwise, general 1 is going to be in a problematic situation.
Dialogue: 0,0:05:09.04,0:05:10.98,Default,,0,0,0,,我们可以这么做\NSo, we could say that
Dialogue: 0,0:05:10.98,0:05:14.64,Default,,0,0,0,,将军1向将军2一次又一次的发送消息\Ngeneral 1 is going to send lots and lots and lots of messengers over to general 2,
Dialogue: 0,0:05:14.64,0:05:17.54,Default,,0,0,0,,所有消息内容都是“现在进攻”，“进攻”，“进攻”\Nall saying “Attack at this time”, “Attack”, “Attack”.
Dialogue: 0,0:05:17.54,0:05:22.88,Default,,0,0,0,,如果有一条消息传输成功 那就没问题了\NAnd if one of those gets through, then things are probably OK,
Dialogue: 0,0:05:22.88,0:05:27.40,Default,,0,0,0,,因为将军2知道将军1总会发起进攻\Nbecause general 2 knows that general 1 is always going to attack.
Dialogue: 0,0:05:27.40,0:05:28.78,Default,,0,0,0,,因此 将军2知道\NSo, general 2 knows that
Dialogue: 0,0:05:28.78,0:05:35.54,Default,,0,0,0,,即使将军1没有收到自己的回复 将军2仍可发起进攻 将军2总是安全的\Nit's safe for general 2 to also go into battle even without responding to general 1,
Dialogue: 0,0:05:35.54,0:05:42.38,Default,,0,0,0,,因为将军1承诺他一定会发起进攻\Nbecause after all, general 1 has promised that general 1 is always going to attack.
Dialogue: 0,0:05:42.38,0:05:45.48,Default,,0,0,0,,然而 也有可能出现所有消息都丢失的情况\NHowever, it could happen that all of the messengers are lost.
Dialogue: 0,0:05:45.48,0:05:48.94,Default,,0,0,0,,在这种情况下 将军2不知道要发起进攻\NAnd so, in this case, general 2 does not know about the attack.
Dialogue: 0,0:05:48.94,0:05:53.56,Default,,0,0,0,,此时 将军1独木难支 惨遭失败\NSo, general 1 ends up going into battle alone and loses.
Dialogue: 0,0:05:53.56,0:05:58.22,Default,,0,0,0,,这种情况的存在意味着将军1“总是进攻”的第一个选择没那么好\NSo, that means this first option of general 1 always attacking is not really great.
Dialogue: 0,0:05:58.22,0:06:01.18,Default,,0,0,0,,我们来考虑另一个选择\NSo, let's consider the alternative, which is that
Dialogue: 0,0:06:01.18,0:06:04.10,Default,,0,0,0,,将军1不承诺总是进攻\Ngeneral 1 does not promise to always attack,
Dialogue: 0,0:06:04.10,0:06:08.74,Default,,0,0,0,,只有当收到将军2发来的积极响应后 将军1才会发起进攻\Nbut general 1 will only attack if it receives a positive response from general 2.
Dialogue: 0,0:06:08.74,0:06:10.48,Default,,0,0,0,,在这种情况下 将军1是安全的\NAnd in this case, general 1 is safe,
Dialogue: 0,0:06:10.48,0:06:18.30,Default,,0,0,0,,因为将军1知道 只有当确定将军2发起进攻时 自己才会发起进攻\Nbecause general 1 knows that it will only go into battle if general 2 is going into battle.
Dialogue: 0,0:06:18.30,0:06:21.26,Default,,0,0,0,,但此时 我们站在将军2的视角再来想一想\NBut now, if you think about it from general 2’s point of view,
Dialogue: 0,0:06:21.26,0:06:29.16,Default,,0,0,0,,现在 将军2知道 仅当将军1收到自己发送的响应后\Nnow general 2 knows that general 1 will only go into attack
Dialogue: 0,0:06:29.16,0:06:32.70,Default,,0,0,0,,将军1才会发起进攻\Nif the response from general 2 to general 1 gets through,
Dialogue: 0,0:06:32.70,0:06:36.38,Default,,0,0,0,,因为将军1会等待另一位将军的响应\Nbecause after all, general 1 is waiting for that response from number 2.
Dialogue: 0,0:06:36.38,0:06:37.76,Default,,0,0,0,,现在\NAnd so, now,
Dialogue: 0,0:06:37.76,0:06:44.28,Default,,0,0,0,,将军2所面临的处境和将军1在第一种选择下的处境是一致的\Nthe general 2 is in exactly the same situation as general 1 was in the first option.
Dialogue: 0,0:06:44.28,0:06:48.28,Default,,0,0,0,,此时 将军2要不就承诺一定会进攻\NAnd that is, either general 2 must commit to always attack,
Dialogue: 0,0:06:48.28,0:06:52.30,Default,,0,0,0,,此时将军2将会面临独木难支的风险\Nin which case, he risks being alone in the battle,
Dialogue: 0,0:06:52.30,0:06:56.20,Default,,0,0,0,,将军2要不就等待将军1的响应\Nor general 2 will wait for a response from general 1,
Dialogue: 0,0:06:56.20,0:06:59.40,Default,,0,0,0,,但此时 将军1又必须要响应了\Nbut now, general 1 has to reply.
Dialogue: 0,0:06:59.40,0:07:03.66,Default,,0,0,0,,因此 我们最终会得到一个无穷无尽的死循环\NAnd so, you end up with these potentially infinite chains of,
Dialogue: 0,0:07:03.66,0:07:06.80,Default,,0,0,0,,“是的 是的 我会发起进攻”、“好的 只要你发起进攻 我就发起进攻”\N“Yes, yes, I'm going to attack”, “OK, I'm going to attack if you attack”,
Dialogue: 0,0:07:06.80,0:07:09.82,Default,,0,0,0,,“好的 我会发起进攻的 但只有你发起进攻我才会发起”\N“Yes, OK, I will attack but only if you also attack”,
Dialogue: 0,0:07:09.82,0:07:12.46,Default,,0,0,0,,“好的 好的 我说过我会发起进攻了” 如此循环下去\N“Yes, yes, I already said I'm going to attack”, and so on.
Dialogue: 0,0:07:12.46,0:07:15.14,Default,,0,0,0,,他们不得不互相发送响应消息\NAnd so, they have to send each other back and forth these messages.
Dialogue: 0,0:07:15.14,0:07:17.54,Default,,0,0,0,,无法保证双方一定已经收到消息并发起进攻\NYou get actually an infinite chain
Dialogue: 0,0:07:18.00,0:07:22.00,Default,,0,0,0,,他们会陷入到无穷无尽的死循环中\Nbefore there's any certainty that they're actually both going to attack together.
Dialogue: 0,0:07:22.00,0:07:26.62,Default,,0,0,0,,在分布式系统中 这个问题被称为\NAnd so, this is called in distributed systems the problem of
Dialogue: 0,0:07:26.62,0:07:28.26,Default,,0,0,0,,无共同知识\Nhaving no common knowledge.
Dialogue: 0,0:07:28.26,0:07:32.08,Default,,0,0,0,,系统中不存在下述共同知识\NSo, there's no knowledge in the system that
Dialogue: 0,0:07:32.08,0:07:34.28,Default,,0,0,0,,一个节点知道\None node knows,
Dialogue: 0,0:07:34.28,0:07:36.90,Default,,0,0,0,,另一个节点知道第一个节点知道\Nand the other node knows that the first node knows it.
Dialogue: 0,0:07:36.90,0:07:42.34,Default,,0,0,0,,第一个节点知道第二个节点知道第一个节点知道\NAnd the first node knows that the second node knows that the first node knows it,
Dialogue: 0,0:07:42.34,0:07:42.98,Default,,0,0,0,,以此类推\Nand so on.
Dialogue: 0,0:07:42.98,0:07:46.96,Default,,0,0,0,,你可以一直往下、无穷无尽地构造下去\NSo, you can construct these arbitrary chains.
Dialogue: 0,0:07:46.96,0:07:49.86,Default,,0,0,0,,最终的结果是\NAnd the end result is just that
Dialogue: 0,0:07:49.86,0:07:54.90,Default,,0,0,0,,无论我们互相之间发送和接收多少次消息 只要消息次数是有限的\Nno matter how many finite sequences of messages we send back and forth,
Dialogue: 0,0:07:54.90,0:07:58.26,Default,,0,0,0,,我们就永远无法绝对保证\Nwe never actually have absolute certainty that
Dialogue: 0,0:07:58.26,0:08:02.70,Default,,0,0,0,,当且仅当将军2发起进攻时 将军1才发起进攻\Ngeneral 1 is going to attack if and only if general 2 is going to attack.
Dialogue: 0,0:08:02.70,0:08:08.58,Default,,0,0,0,,你可以构建概率性的保证机制 概率可以无限接近于1\NSo, you can build up gradually increasing, like probabilistic certainty maybe,
Dialogue: 0,0:08:09.08,0:08:13.54,Default,,0,0,0,,具体机制依赖于消息是否会被截获的相关系统假设\Ndepending on your assumptions of whether messengers get captured or not.
Dialogue: 0,0:08:14.18,0:08:18.22,Default,,0,0,0,,但我们不可能做到100%的保证\NBut it's actually impossible to reach complete certainty here.
Dialogue: 0,0:08:18.22,0:08:24.08,Default,,0,0,0,,现在 我们把这个抽象的思想实验应用到具体的例子中\NNow, let's take this abstract thought experiment and apply it to a concrete example.
Dialogue: 0,0:08:24.08,0:08:27.10,Default,,0,0,0,,我们在上一节课程中介绍过一个例子\NSo, we had in the last lecture this example of
Dialogue: 0,0:08:27.10,0:08:31.22,Default,,0,0,0,,在线商店向支付服务发起一个RPC请求\Nan online shop making an RPC request to a payment service
Dialogue: 0,0:08:31.22,0:08:33.30,Default,,0,0,0,,让用户可以使用信用卡支付\Nin order to charge a credit card.
Dialogue: 0,0:08:33.30,0:08:36.32,Default,,0,0,0,,在这个场景下 我们希望做到的是\NAnd really what we want here is that
Dialogue: 0,0:08:36.32,0:08:42.96,Default,,0,0,0,,当且仅当客户为货品支付费用 在线商店才会发货\Nthe online shop dispatches the goods if and only if the customer pays for the goods,
Dialogue: 0,0:08:42.96,0:08:46.90,Default,,0,0,0,,大家可以想象一下 如果在线商店已经发货\Nbecause you can imagine if the online shop dispatches the goods
Dialogue: 0,0:08:46.90,0:08:49.72,Default,,0,0,0,,但支付服务没有从客户的信用卡划账\Nbut the payment service does not charge the credit card,
Dialogue: 0,0:08:49.72,0:08:50.96,Default,,0,0,0,,那在线商店就不高兴了\Nthen the shop is unhappy,
Dialogue: 0,0:08:50.96,0:08:54.64,Default,,0,0,0,,因为商店相当于免费给客户发送了商品\Nbecause the shop has just given away some goods for free.
Dialogue: 0,0:08:54.64,0:08:59.22,Default,,0,0,0,,如果在线商店没有发货\NIf the online shop does not dispatch the goods,
Dialogue: 0,0:08:59.22,0:09:02.00,Default,,0,0,0,,但支付服务已经从客户的信用卡划账了\Nbut the payment service does charge the credit card,
Dialogue: 0,0:09:02.00,0:09:03.80,Default,,0,0,0,,这时候客户就不高兴了\Nthen the customer is unhappy,
Dialogue: 0,0:09:03.80,0:09:06.78,Default,,0,0,0,,因为客户花了钱 但没收到任何商品\Nbecause the customer got charged without receiving any goods.
Dialogue: 0,0:09:06.78,0:09:09.54,Default,,0,0,0,,我们实际想达到的目标\NSo, really what we want is
Dialogue: 0,0:09:09.54,0:09:12.58,Default,,0,0,0,,与两将军问题所要实现的目标是高度类似的\Nsomething that looks extremely similar to the two generals problem here,
Dialogue: 0,0:09:12.58,0:09:14.80,Default,,0,0,0,,当且仅当支付服务从客户的信用卡划账后\Nthat the online shop dispatches to goods
Dialogue: 0,0:09:14.80,0:09:18.32,Default,,0,0,0,,在线商店才会发货\Nif and only if the payment service charges the card.
Dialogue: 0,0:09:18.32,0:09:20.62,Default,,0,0,0,,正如大家所想象的那样\NAnd as you can imagine,
Dialogue: 0,0:09:20.62,0:09:25.00,Default,,0,0,0,,在线商店和支付服务的RPC\Nthe RPC between the online shop and the payment service looks very much like
Dialogue: 0,0:09:25.00,0:09:28.52,Default,,0,0,0,,和两将军问题中穿梭在丛林的信使非常相似\Nthe messengers running through the forest in the two generals problem,
Dialogue: 0,0:09:28.52,0:09:32.08,Default,,0,0,0,,消息可能会丢失\Nwhich is to say that the messages might get lost,
Dialogue: 0,0:09:32.08,0:09:33.90,Default,,0,0,0,,其中一方可能无法收到消息\Neither one or the other might get lost.
Dialogue: 0,0:09:33.90,0:09:38.00,Default,,0,0,0,,因此 实际上不可能让在线商店和支付服务\NAnd so, it is actually not possible for the online shop and the payment service
Dialogue: 0,0:09:38.00,0:09:40.92,Default,,0,0,0,,以100%的概率保证\Nto achieve the certainty that
Dialogue: 0,0:09:40.92,0:09:45.32,Default,,0,0,0,,当前仅当一个动作发生后 另一个动作才会发生\None action will happen if and only if the other action happens.
Dialogue: 0,0:09:46.32,0:09:50.06,Default,,0,0,0,,当然了 实际中的在线商店仍然可以运作\NIn practice, actually of course, online shops do work.
Dialogue: 0,0:09:50.66,0:09:52.84,Default,,0,0,0,,但在线商店可以运作的原因是\NBut the reason they work is because
Dialogue: 0,0:09:52.84,0:09:59.14,Default,,0,0,0,,有很多第二层的保护机制来保证支付和发货过程可以合理运作\Nthere are a bunch of second level safeguards then, which ensure a reasonable outcome.
Dialogue: 0,0:09:59.14,0:10:04.42,Default,,0,0,0,,例如 有可能出现信用卡已经完成了支付\NSo, for example, if it turns out that the card got charged
Dialogue: 0,0:10:04.42,0:10:07.74,Default,,0,0,0,,但在线商店的仓库里已经没货了\Nbut the online shop doesn't actually have the goods in stock anymore,
Dialogue: 0,0:10:07.74,0:10:10.38,Default,,0,0,0,,此时 在线商店只需要发送一封致歉邮件 内容是\Nthen the online shop will just send an apology email saying,
Dialogue: 0,0:10:10.38,0:10:13.62,Default,,0,0,0,,“很抱歉 我们的仓库没货了 我们会向您的信用卡退款”\N“Oh sorry, actually we're out of stock. We've refunded your card”.
Dialogue: 0,0:10:13.62,0:10:14.98,Default,,0,0,0,,这种解决方案就很不错\NAnd so, that way it's fine.
Dialogue: 0,0:10:14.98,0:10:18.26,Default,,0,0,0,,因此 在线商店场景可以走出两将军问题的困境\NAnd so, it's possible to get out of this situation
Dialogue: 0,0:10:18.26,0:10:24.88,Default,,0,0,0,,因为支付过程是可撤销的 可以执行退款操作\Nbecause the charge is actually a revocable action. It's possible to refund the charge.
Dialogue: 0,0:10:24.88,0:10:28.88,Default,,0,0,0,,因此 我们总可以让客户有安全感\NAnd therefore, it's possible to get back into a safe state
Dialogue: 0,0:10:28.88,0:10:33.60,Default,,0,0,0,,就算支付成功但在线商店没有发货 客户也能通过退款来获取安全感\Nwhere neither the goods dispatch nor the payment has effectively happened.
Dialogue: 0,0:10:34.80,0:10:42.68,Default,,0,0,0,,另一种情况是支付服务有可能没有成功从客户信用卡上划账\NOr another option is that the payment service may or may not have charged a card.
Dialogue: 0,0:10:42.68,0:10:47.18,Default,,0,0,0,,这种情况下 当网络被修复后\NAnd so, when the network is repaired,
Dialogue: 0,0:10:47.18,0:10:49.68,Default,,0,0,0,,当消息又能传输成功时\Nand the messages can get through again,
Dialogue: 0,0:10:49.68,0:10:52.68,Default,,0,0,0,,在线商店可以向支付服务发起检查请求 询问到\Nthen the online shop checks with the payment service saying,
Dialogue: 0,0:10:52.68,0:10:56.16,Default,,0,0,0,,“你现在成功划款了吗？之前我没收到你划款成功的响应”\N“Now, did you actually charge that card or not, because I never heard back from you”,
Dialogue: 0,0:10:56.82,0:10:58.48,Default,,0,0,0,,“你是否完成划款操作了？”\N“Whether you charge it or not”?
Dialogue: 0,0:10:58.48,0:11:00.28,Default,,0,0,0,,这种情况下 大概率发生的事情是\NAnd so, what will probably happen is that
Dialogue: 0,0:11:00.28,0:11:03.84,Default,,0,0,0,,即使支付服务不能确定在线商店是否发货\Nthe payment service will always go ahead and charge the card,
Dialogue: 0,0:11:04.66,0:11:09.96,Default,,0,0,0,,支付服务也可以执行划款操作\Neven if it's not certain that the online shop is going to dispatch the goods,
Dialogue: 0,0:11:09.96,0:11:14.60,Default,,0,0,0,,这么做也没问题 因为必要时 支付服务仍然可以发起退款\Nin this case it's fine, because the payment could get refunded if necessary.
Dialogue: 0,0:11:14.60,0:11:17.64,Default,,0,0,0,,这就是在线商店问题\NSo, that is the way in which this online shopping problem
Dialogue: 0,0:11:17.64,0:11:21.56,Default,,0,0,0,,与两将军问题不完全一致的地方\Nis not actually exactly the same as the two generals problem.
Dialogue: 0,0:11:21.56,0:11:26.18,Default,,0,0,0,,尽管如此 两将军问题也演示了\NBut nevertheless, the two generals problem does illustrate this issue of
Dialogue: 0,0:11:26.72,0:11:29.46,Default,,0,0,0,,分布式系统中存在的不确定性\Nuncertainty that we have in a distributed system
Dialogue: 0,0:11:29.46,0:11:32.94,Default,,0,0,0,,即我们无法确定消息是否真的成功传输给了对方\Nwhen we're not sure if the messages got through or not.
