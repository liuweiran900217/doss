[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 3.3_Causality and happens-before.mp4
Video File: 3.3_Causality and happens-before.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 152
Active Line: 161
Video Position: 19185

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:00.92,0:00:02.64,Default,,0,0,0,,在本节课的最后一部分\NIn the last part of this lecture,
Dialogue: 0,0:00:02.64,0:00:07.62,Default,,0,0,0,,我们将考虑分布式系统中可能出现的\Nwe are going to look at the relative ordering of different messages and different events
Dialogue: 0,0:00:07.62,0:00:09.86,Default,,0,0,0,,不同消息和事件的相对顺序问题\Nthat can happen in distributed system,
Dialogue: 0,0:00:09.86,0:00:13.46,Default,,0,0,0,,以及我们如何在这个场景下使用时间\Nand how we might use time in this context.
Dialogue: 0,0:00:13.46,0:00:15.64,Default,,0,0,0,,我们仍然以一个例子来开场\NSo, let's start with an example again.
Dialogue: 0,0:00:15.64,0:00:20.04,Default,,0,0,0,,我们先来考虑一个例子：通过互联网开一个讨论线\NLet's start with an example of a discussion thread on the Internet.
Dialogue: 0,0:00:20.04,0:00:25.48,Default,,0,0,0,,一种典型的荒谬讨论是 一个用户说\NAnd one of those typical highbrow discussions where one user says
Dialogue: 0,0:00:25.48,0:00:27.42,Default,,0,0,0,,“月亮是奶酪做的！”\N“The moon is made of cheese!”
Dialogue: 0,0:00:27.42,0:00:29.62,Default,,0,0,0,,另一个用户响应说\Nand another user responds to them saying
Dialogue: 0,0:00:29.62,0:00:31.02,Default,,0,0,0,,“不 你错了！”\N“No, you are wrong!”
Dialogue: 0,0:00:31.02,0:00:35.22,Default,,0,0,0,,我们来为这个讨论线建立一个模型\NSo, we are going to model this kind of discussion thread here.
Dialogue: 0,0:00:35.22,0:00:40.40,Default,,0,0,0,,假设用户A说“月亮是奶酪做的！”\NLet's say we have user A here who says “The moon is made of cheese!”,
Dialogue: 0,0:00:40.40,0:00:44.28,Default,,0,0,0,,将消息m_1发送给用户B和用户C\Nsends that message m_1 to users B and C.
Dialogue: 0,0:00:44.28,0:00:48.50,Default,,0,0,0,,我们这里使用一个常见的系统模型\NAnd we're going to just assume our usual system model of,
Dialogue: 0,0:00:49.32,0:00:51.56,Default,,0,0,0,,这是一个可靠网络连接\Nlet's say, reliable network links.
Dialogue: 0,0:00:52.08,0:00:55.84,Default,,0,0,0,,但消息可能会出现时延 消息可能会出现乱序\Nbut messages might be delayed or might be reordered as usual.
Dialogue: 0,0:00:55.84,0:01:00.82,Default,,0,0,0,,可能出现的一种情况是 用户B很快收到了消息m_1\NAnd so, it can happen that user B receives message m_1 fairly quickly,
Dialogue: 0,0:01:00.82,0:01:03.64,Default,,0,0,0,,用户C等了一会才收到了这条消息\Nand user C receives that message a little bit later,
Dialogue: 0,0:01:03.64,0:01:07.00,Default,,0,0,0,,这是因为网络出现了一点延迟 这种情况很常见\Njust because it's been delayed a bit in the network. That's fine.
Dialogue: 0,0:01:07.00,0:01:11.76,Default,,0,0,0,,随后 用户B响应消息1\NNow, then, user B responds to message 1.
Dialogue: 0,0:01:11.76,0:01:16.14,Default,,0,0,0,,用户B收到m_1 随后说“不 月亮不是奶酪做的！”\NUser B receives m_1, and says “No, the moon is not made of cheese!”
Dialogue: 0,0:01:16.14,0:01:22.20,Default,,0,0,0,,将这句话作为消息m_2发送给用户A和用户C\Nand sends that as message m_2 back to user A and also to user C.
Dialogue: 0,0:01:22.20,0:01:25.32,Default,,0,0,0,,现在 你可以从示意图看到\NNow, what can happen is what you see in this diagram here is that
Dialogue: 0,0:01:25.32,0:01:31.34,Default,,0,0,0,,用户C在收到m_1之前先收到了m_2\Nuser C actually receives m_2 before receiving m_1.
Dialogue: 0,0:01:31.34,0:01:36.74,Default,,0,0,0,,这令人非常苦恼 想象一下 当用户C看到这条讨论线时\NAnd this is kind of confusing because if you imagine user C is looking at this thread,
Dialogue: 0,0:01:36.74,0:01:42.06,Default,,0,0,0,,用户C先看到“不 不是这样的！” 再看到“月亮是奶酪做的！”\Nuser C first sees “Oh no, it isn't!”, and then “The moon is made of cheese!”
Dialogue: 0,0:01:42.06,0:01:44.50,Default,,0,0,0,,即使“不 不是这样的！”\NSo, even though “Oh no, it isn't!” really
Dialogue: 0,0:01:44.50,0:01:47.36,Default,,0,0,0,,应该是用来回复“月亮是奶酪做的！”\Nshould be a reply to “The moon is made of cheese!”
Dialogue: 0,0:01:48.06,0:01:50.08,Default,,0,0,0,,但这里出现了消息乱序的情况\Nwe have ended up reordering those.
Dialogue: 0,0:01:50.08,0:01:53.68,Default,,0,0,0,,我们在得到被回复的消息前先收到了回复的消息\NAnd we've got the reply before the thing that it's replying to.
Dialogue: 0,0:01:53.68,0:01:55.80,Default,,0,0,0,,这令人非常苦恼\NThis is pretty confusing.
Dialogue: 0,0:01:55.80,0:02:01.38,Default,,0,0,0,,我们来想一想 我们如何形式化描述这个问题\NSo, let's think about how we might be able to formalize this problem,
Dialogue: 0,0:02:01.38,0:02:05.40,Default,,0,0,0,,我们如何构建一个算法来解决这个问题\Nand how we can create algorithms that solve this problem.
Dialogue: 0,0:02:05.40,0:02:11.04,Default,,0,0,0,,解决此问题要基于一个事实：一件事情一定是另一件事情发生后才发生的\NSo, this is based on this idea that one thing happened before another.
Dialogue: 0,0:02:11.04,0:02:14.26,Default,,0,0,0,,我认为我们可以同意m_1一定在m_2之前发生\NI think we can agree that m_1 happened before m_2,
Dialogue: 0,0:02:14.26,0:02:19.56,Default,,0,0,0,,因为如果m_2是m_1的响应 那么肯定要先发生m_1\Nbecause if m_2 is a response to m_1, then m_1 must have happened first.
Dialogue: 0,0:02:19.56,0:02:23.82,Default,,0,0,0,,系统内存在一些逻辑时间\NThere's some kind of logical time in the system here.
Dialogue: 0,0:02:23.82,0:02:27.62,Default,,0,0,0,,我们来看看 如果我们在每条消息中附加上时间戳 则会发生什么\NBut let's see what happens if we attach timestamps to each message.
Dialogue: 0,0:02:27.62,0:02:31.24,Default,,0,0,0,,当用户A发送消息m_1时\NSo, let's say that when user A sends message m_1,
Dialogue: 0,0:02:31.24,0:02:35.56,Default,,0,0,0,,用户A使用自己的本地时钟生成一个时间戳t_1\Nuser A also uses A's local clock to generate a timestamp t_1,
Dialogue: 0,0:02:35.56,0:02:40.02,Default,,0,0,0,,并将时间戳t_1附加在消息m_1上\Nand attaches that timestamp t_1 to the message m_1.
Dialogue: 0,0:02:40.02,0:02:45.44,Default,,0,0,0,,随后 当用户B收到m_1并发送m_2时\NAnd then, also, when user B receives m_1 and sends m_2,
Dialogue: 0,0:02:46.04,0:02:50.74,Default,,0,0,0,,用户B从自己的本地时钟得到一个时间戳t_2\Nuser B gets a timestamp t_2 from B's local clock,
Dialogue: 0,0:02:50.74,0:02:57.72,Default,,0,0,0,,将此时间戳附加在消息m_2上 并把消息发送给其他两个节点\Nand attaches that timestamp to the m_2 message that is sent to the other two nodes.
Dialogue: 0,0:02:57.72,0:03:01.74,Default,,0,0,0,,现在 我们假设这些时间戳表示的是现实世界的日历时钟\NAnd now, we're going to assume that these are of course physical time-of-day clocks.
Dialogue: 0,0:03:01.74,0:03:06.10,Default,,0,0,0,,我们假设时钟已经通过NTP等协议完成了同步\NWe're going to assume that the clocks are synchronized using something like NTP.
Dialogue: 0,0:03:06.10,0:03:11.74,Default,,0,0,0,,但是 即使时钟已经经过了同步\NBut it could still happen even if clocks are synchronized,
Dialogue: 0,0:03:11.74,0:03:17.16,Default,,0,0,0,,时间戳t_2也可能会小于时间戳t_1\Nit could happen that the timestamp t_2 is actually less than the timestamp t_1.
Dialogue: 0,0:03:17.16,0:03:23.04,Default,,0,0,0,,这确实有可能发生 因为同一系统中的两个节点可能会存在时钟偏移\NThis could happen because the clock skew between two nodes in a system
Dialogue: 0,0:03:23.04,0:03:27.98,Default,,0,0,0,,两个节点的时钟偏移量可能会大于两个节点之间的单向网络延迟\Nmight be greater than the one-way network delay between those two nodes.
Dialogue: 0,0:03:27.98,0:03:33.24,Default,,0,0,0,,即使经过了NTP同步 我们仍然无法排除\NAnd even with NTP synchronization, we cannot rule out the possibility that
Dialogue: 0,0:03:33.24,0:03:38.20,Default,,0,0,0,,时钟偏移量大于单向网络延迟的这种可能发生的情况\Nthe clock skew is greater than the one-way network latency.
Dialogue: 0,0:03:38.20,0:03:43.02,Default,,0,0,0,,在我们的这个场景下 可能出现的情况是 m_1经历了一些延迟\NAnd so, in this case, here, m_1 is experiencing some kind of latency,
Dialogue: 0,0:03:43.72,0:03:49.10,Default,,0,0,0,,但延迟小于用户A和用户B的时钟偏移量\Nbut that latency is smaller than the clock skew between users A and B.
Dialogue: 0,0:03:49.10,0:03:53.04,Default,,0,0,0,,在这种情况下 如果用户B的时钟跑得稍微慢了一点\NAnd in that case, if user's B clock is running slightly behind
Dialogue: 0,0:03:53.04,0:03:55.76,Default,,0,0,0,,用户A的时钟跑得稍微快了一点\Nand uses A's clock is running slightly fast,
Dialogue: 0,0:03:55.76,0:03:59.12,Default,,0,0,0,,此时的结果就是 t_2小于t_1\Nthen you could end up with t_2 being less than t_1.
Dialogue: 0,0:03:59.12,0:04:02.68,Default,,0,0,0,,我们这个练习的总体目标是\NAnd so, our whole aim of this exercise was to
Dialogue: 0,0:04:02.68,0:04:07.02,Default,,0,0,0,,保证消息可以根据发生的时间正确排序\Nensure that messages get put in the right order according to time.
Dialogue: 0,0:04:07.02,0:04:09.00,Default,,0,0,0,,但即使在这里使用时间\NBut even using time here,
Dialogue: 0,0:04:09.00,0:04:12.18,Default,,0,0,0,,我们仍然不能按照正确的发生顺序放置消息\Nwe have not actually been able to put the messages in the right order,
Dialogue: 0,0:04:12.18,0:04:15.32,Default,,0,0,0,,因为不同节点的时间戳顺序\Nbecause the timestamp order is inconsistent
Dialogue: 0,0:04:15.32,0:04:20.04,Default,,0,0,0,,与我们理解的消息请求和回复顺序是不一致的\Nwith our understanding of which message is a reply to which the other message.
Dialogue: 0,0:04:20.04,0:04:23.34,Default,,0,0,0,,如何解决这个问题？\NSo, how do we solve this problem?
Dialogue: 0,0:04:23.34,0:04:25.68,Default,,0,0,0,,在分布式系统中\NWhat we do in distributed systems is
Dialogue: 0,0:04:25.68,0:04:28.74,Default,,0,0,0,,我们解决此问题的方法是使用此前发生关系\Nwe use something called the happens-before relation.
Dialogue: 0,0:04:28.74,0:04:32.74,Default,,0,0,0,,这是为分布式系统中可能发生的活动\NAnd so, this is a mathematical model of activity
Dialogue: 0,0:04:32.74,0:04:34.96,Default,,0,0,0,,所定义的一个数学模型\Nthat has happened in the distributed system.
Dialogue: 0,0:04:34.96,0:04:38.12,Default,,0,0,0,,当我们讨论分布式系统中的可能发生的活动时\NAnd so, when we're talking about activity in a distributed system,
Dialogue: 0,0:04:38.12,0:04:40.82,Default,,0,0,0,,我们首先需要定义什么叫“发生了一件事情” \Nfirst of all, we need to define what are the things that happen.
Dialogue: 0,0:04:40.82,0:04:43.06,Default,,0,0,0,,我们把“发生了一件事情”称为事件\NSo, we'll say the things that happen are events.
Dialogue: 0,0:04:43.06,0:04:51.16,Default,,0,0,0,,事件可以是：系统中的一个节点在本地执行了一个步骤\NAn event can be just one node in the system making a local execution step,
Dialogue: 0,0:04:51.16,0:04:54.20,Default,,0,0,0,,一个节点做了一些事情 这属于一个事件\None node doing something, that can be an event,
Dialogue: 0,0:04:54.20,0:04:58.28,Default,,0,0,0,,事件也可以是：一个节点向另一个节点发送了一条消息\Nor an event could be a message that one node sends to another.
Dialogue: 0,0:04:58.28,0:05:00.26,Default,,0,0,0,,发送一条消息也属于一个事件\NSo, the sending of the message is one event,
Dialogue: 0,0:05:00.26,0:05:02.42,Default,,0,0,0,,接收一条消息是另一个事件\Nand then, the receiving of the message is another event.
Dialogue: 0,0:05:02.42,0:05:06.88,Default,,0,0,0,,如果一条消息到达了某个参与方处 接收此消息属于另一个事件\NIf the message arrives, then the receiving would be another event.
Dialogue: 0,0:05:06.88,0:05:14.42,Default,,0,0,0,,现在 我们可以把关系定义为包含一系列事件对的集合\NAnd so now, we can define a relation which is a set of pairs of events
Dialogue: 0,0:05:15.26,0:05:18.88,Default,,0,0,0,,每个事件对都描述了事件的相互关系\Nthat describes how those events relate to each other.
Dialogue: 0,0:05:18.88,0:05:24.52,Default,,0,0,0,,如果a在b之前发生 则此前发生关系写为a→b\NAnd this happens-before relation is written as a a→b if a happened before b.
Dialogue: 0,0:05:24.52,0:05:30.28,Default,,0,0,0,,我们称如果发生了下述三种情况之一 则a→b\NAnd we say that a→b if at least one of three things is true.
Dialogue: 0,0:05:30.28,0:05:35.92,Default,,0,0,0,,第一种情况是 a和b这两个事件在同一个节点中发生\NSo, the first thing is that the two events a and b happened in the same node,
Dialogue: 0,0:05:35.92,0:05:39.96,Default,,0,0,0,,且在此节点的本地执行顺序中 a在b之前发生\Nand a occurred before b in that node's local execution order.
Dialogue: 0,0:05:39.96,0:05:45.64,Default,,0,0,0,,我们这里假设每个节点是单线程处理任务的\NSo, that means we are here assuming that each node is a single threaded process
Dialogue: 0,0:05:45.64,0:05:47.66,Default,,0,0,0,,即先完成一件事情 再完成另一件事情\Nthat is just doing one thing after another.
Dialogue: 0,0:05:47.66,0:05:50.66,Default,,0,0,0,,当单节点内仅包含单线程时\NSo, there's no ambiguity about the order
Dialogue: 0,0:05:50.66,0:05:53.82,Default,,0,0,0,,此节点就不会有模糊的顺序定义了\Nin which things happened on a single node if there's a single thread.
Dialogue: 0,0:05:53.82,0:05:56.06,Default,,0,0,0,,事情只能一件一件地发生\NThen, things only happen one after another,
Dialogue: 0,0:05:56.06,0:06:00.78,Default,,0,0,0,,我们可以准确定义哪件事情先发生 哪件事情后发生\Nand we can define exactly which thing happened first and which happens second.
Dialogue: 0,0:06:00.78,0:06:03.40,Default,,0,0,0,,对于每一个节点\NSo, we're going to assume that for each node,
Dialogue: 0,0:06:03.40,0:06:08.72,Default,,0,0,0,,我们都假设此节点的事件发生顺序都是严格有序的\Nthere's a strict total order of all of the events that happened on that particular node.
Dialogue: 0,0:06:08.72,0:06:12.34,Default,,0,0,0,,如果我们确实希望此数学模型支持多线程处理\NIf we did want to support multi-threaded processes,
Dialogue: 0,0:06:12.34,0:06:15.20,Default,,0,0,0,,则为了满足模型的定义\Nthen we could have each thread being a separate node
Dialogue: 0,0:06:15.20,0:06:17.10,Default,,0,0,0,,我们把每个线程都看成独立的节点\Nfor the purposes of this model here.
Dialogue: 0,0:06:17.10,0:06:19.68,Default,,0,0,0,,我们现在只假设单线程的情况\NSo, we can just assume single threads for now.
Dialogue: 0,0:06:19.68,0:06:22.26,Default,,0,0,0,,这样一来 我们就可以称\NAnd so, we're going to say that
Dialogue: 0,0:06:22.26,0:06:28.36,Default,,0,0,0,,如果a和b发生在同一节点上 且a在b之前执行 则a→b\Na→b if they happened on the same node and a was executed before b.
Dialogue: 0,0:06:28.36,0:06:29.60,Default,,0,0,0,,这是一个合理的定义\NThat makes sense.
Dialogue: 0,0:06:29.60,0:06:32.94,Default,,0,0,0,,第二种情况是 我们称a→b\NSecondly, we're going to say that a→b
Dialogue: 0,0:06:32.94,0:06:37.74,Default,,0,0,0,,如果事件a是发送特定的消息m\Nif a is the event that a certain message m was sent,
Dialogue: 0,0:06:37.74,0:06:42.62,Default,,0,0,0,,而事件b是接收相同的消息m\Nand b is the event that this same message was received.
Dialogue: 0,0:06:42.62,0:06:45.88,Default,,0,0,0,,为了消除第二种情况中可能出现歧义的情况\NSo, for the purpose of making this unambiguous,
Dialogue: 0,0:06:45.88,0:06:49.38,Default,,0,0,0,,我们必须假设每条消息都是独一无二的\Nwe have to assume that messages are unique, because otherwise
Dialogue: 0,0:06:49.38,0:06:53.14,Default,,0,0,0,,否则可能会出现两个不同事件发送了同一条消息的情况\Nyou could have two different events for the sending of the same message,
Dialogue: 0,0:06:53.14,0:06:55.12,Default,,0,0,0,,当然了 实际系统中肯定会出现这种情况\Nwhich, of course, could happen in a real system,
Dialogue: 0,0:06:55.12,0:06:58.36,Default,,0,0,0,,但这种情况会使模型在数学上变得难以描述\Nbut it makes the thing difficult to model mathematically.
Dialogue: 0,0:06:58.36,0:07:03.26,Default,,0,0,0,,为了简化描述 我们假设发送的每条消息都是独一无二的\NSo, for simplicity's sake, here we just assume that every message that is sent is unique.
Dialogue: 0,0:07:03.26,0:07:06.04,Default,,0,0,0,,如果我们想在实际中让每条消息变得独一无二\NAnd if we wanted to actually make messages unique in practice,
Dialogue: 0,0:07:06.04,0:07:08.04,Default,,0,0,0,,我们可以在每条消息上附加一个顺序值\Nwe could attach some kind of sequence number
Dialogue: 0,0:07:08.04,0:07:12.08,Default,,0,0,0,,并在消息上附加发送此条消息的节点标识符\Nand the identifier of the node that sends the message.
Dialogue: 0,0:07:12.08,0:07:14.30,Default,,0,0,0,,我们可以在每条消息上都附加节点标识符和顺序值\NFor example, we could attach that to every message,
Dialogue: 0,0:07:14.30,0:07:16.60,Default,,0,0,0,,我们也可以在每条消息上附加一个很长的随机数\Nor we could pick a long random number for every message,
Dialogue: 0,0:07:16.60,0:07:20.62,Default,,0,0,0,,这就足以让每条消息都变得独一无二了\Nand that would be sufficient to make every message unique.
Dialogue: 0,0:07:20.62,0:07:24.86,Default,,0,0,0,,第二种情况描述的此前发生关系也是合理的\NAnd so, again, this happens-before relationship makes sense,
Dialogue: 0,0:07:24.86,0:07:29.40,Default,,0,0,0,,因为消息只有在被发送后才可能被接收\Nbecause a message can only be received after it has been sent.
Dialogue: 0,0:07:29.40,0:07:33.82,Default,,0,0,0,,因此 在接收特定消息之前认为此特定消息先被发送了出来\NAnd so, it makes sense for the sending of that particular message to happen
Dialogue: 0,0:07:33.82,0:07:36.98,Default,,0,0,0,,这种关系是合理的\Nbefore the receipt of that message, OK?
Dialogue: 0,0:07:36.98,0:07:40.30,Default,,0,0,0,,这就是满足此前发生关系的前两种情况\NSo, those are the first two clauses of happens before.
Dialogue: 0,0:07:40.30,0:07:48.04,Default,,0,0,0,,第三种情况非常简单 如果我们能找到某个事件c 使得a→c且c→b\NThe third is simply if we can find some event c such that a→c and c→b,
Dialogue: 0,0:07:48.04,0:07:51.40,Default,,0,0,0,,则一定满足a→b\Nthen it must also be the case that a→b.
Dialogue: 0,0:07:51.40,0:07:55.52,Default,,0,0,0,,第三种情况只是定义了前两种子句的传递性\NSo, this is simply taking the transitive closure of the first two points
Dialogue: 0,0:07:55.52,0:07:59.98,Default,,0,0,0,,将此前发生关系扩展为满足偏序性\Nand extending the whole thing into what is called a partial order.
Dialogue: 0,0:07:59.98,0:08:07.38,Default,,0,0,0,,偏序性有点类似于两个事物的小于关系\NSo, a partial order behaves a bit like a less-than relationship between two things.
Dialogue: 0,0:08:07.38,0:08:11.48,Default,,0,0,0,,偏序性允许你比较两个事件 知道哪个事件先发生\NSo, it allows you to compare two things and say which one happened first.
Dialogue: 0,0:08:11.48,0:08:16.54,Default,,0,0,0,,但有些事件可能无法比较先后关系\NBut there might be some things that are incomparable according to this order,
Dialogue: 0,0:08:16.54,0:08:23.10,Default,,0,0,0,,两个事件既不满足a→b 也不满足b→a 这两个事件没有先后关系\Nwhere it is not the case that a→b or b→a, the two are simply unrelated.
Dialogue: 0,0:08:23.10,0:08:26.22,Default,,0,0,0,,有些情况下 两个事件的发生顺序没有先后关系\NIt is not the case that either one happened before the other.
Dialogue: 0,0:08:26.22,0:08:29.14,Default,,0,0,0,,此时 我们称a和b是并发的\NAnd in that case, we say that a and b are concurrent.
Dialogue: 0,0:08:29.14,0:08:33.46,Default,,0,0,0,,我们用两个竖线的符号‖来描述事件的并发关系\NAnd we write it with this little double bar, this ‖ here.
Dialogue: 0,0:08:33.46,0:08:35.66,Default,,0,0,0,,这里有个很有意思的结论\NSo, this is interesting here.
Dialogue: 0,0:08:35.66,0:08:42.78,Default,,0,0,0,,对于任意两个事件a和b 可以证明这两个事件只有三种可能的关系\NNow, for any two events a and b, it turns out that there are only three possibilities,
Dialogue: 0,0:08:42.78,0:08:48.18,Default,,0,0,0,,或者a→b 或者b→a 或者a‖b\Neither a→b, or b→a, or a‖b.
Dialogue: 0,0:08:48.18,0:08:52.24,Default,,0,0,0,,讲义中的一个习题就是让你来证明\NAnd one of the exercises in the notes asks you to actually prove the fact that
Dialogue: 0,0:08:52.24,0:08:56.08,Default,,0,0,0,,两个事件之间只有三种可能的关系\Nthese are exactly the three possibilities that can happen.
Dialogue: 0,0:08:56.08,0:08:59.64,Default,,0,0,0,,我们来看此前发生关系的一个例子\NSo, let's look at an example of the happens-before relationship.
Dialogue: 0,0:09:00.18,0:09:05.28,Default,,0,0,0,,图中 我们用小黑点表示事件\NSo, here, we've got events are represented as these little black blobs,
Dialogue: 0,0:09:05.28,0:09:09.28,Default,,0,0,0,,和之前一样 我们用箭头表示在网络中发送的消息\Nand messages are sent over the network with these arrows as usual.
Dialogue: 0,0:09:09.28,0:09:10.72,Default,,0,0,0,,这个例子中有三个节点\NAnd we've got three nodes here.
Dialogue: 0,0:09:10.72,0:09:11.54,Default,,0,0,0,,接下来\NAnd so,
Dialogue: 0,0:09:11.54,0:09:16.00,Default,,0,0,0,,我们要应用独立的子句构造此前发生关系\Nwe're going to build up the happens-before relationship from the individual clauses.
Dialogue: 0,0:09:16.00,0:09:21.50,Default,,0,0,0,,第一 根据特定节点的事件发生顺序\NAnd so, firstly, due to the order of events happening in a particular node,
Dialogue: 0,0:09:21.50,0:09:26.50,Default,,0,0,0,,节点A在b之前执行a 因此a→b\Nwell, here, node A executed a before b, therefore, a→b.
Dialogue: 0,0:09:26.50,0:09:30.34,Default,,0,0,0,,节点B在d之前执行c 因此c→d\NNode B executed c before d, so, therefore, c→d.
Dialogue: 0,0:09:30.34,0:09:34.44,Default,,0,0,0,,节点C在f之前执行e 因此e→f\NAnd node C executed e before f, so, therefore, e→f.
Dialogue: 0,0:09:34.44,0:09:37.54,Default,,0,0,0,,目前为止 一切清晰\NOK, so far, so clear.
Dialogue: 0,0:09:37.54,0:09:41.02,Default,,0,0,0,,第二 根据消息的发送和接收顺序\NSecondly, now, due to messages sent and received,
Dialogue: 0,0:09:41.02,0:09:44.16,Default,,0,0,0,,消息在接收之前应该先被发送出来\Nthe sending of a message happens before the receipt of that message,
Dialogue: 0,0:09:44.16,0:09:49.36,Default,,0,0,0,,因此b→c 因为网络中传输了消息m_1\Nso, therefore, b→c, because that is message m_1 traveling over the network.
Dialogue: 0,0:09:49.36,0:09:56.28,Default,,0,0,0,,同样地 d→f 因为网络中传输了消息m_2\NAnd also, d→f, because that is message m_2 traveling over the network.
Dialogue: 0,0:09:56.28,0:10:01.30,Default,,0,0,0,,现在 我们得到了部分事件的此前发生关系\NSo now, we've got all of these relationships between some of the events.
Dialogue: 0,0:10:01.30,0:10:04.68,Default,,0,0,0,,我们再用子句传递性对所有关系进行扩展\NNow, we extend this whole thing with the transitive closure.
Dialogue: 0,0:10:04.68,0:10:10.10,Default,,0,0,0,,举个例子 根据子句传递性 a→c且a→d\NAnd so, due to the transitive closure, for example, a→c and a→d,
Dialogue: 0,0:10:10.10,0:10:13.96,Default,,0,0,0,,本质上 你可以想象在图中取得事件发生的一条路径\Nessentially, what you can imagine here is we can take a path through this graph.
Dialogue: 0,0:10:13.96,0:10:19.24,Default,,0,0,0,,你可以想象每个节点上的事件沿路径依次按时间发生\NYou can imagine any path that moves forward in time on a node
Dialogue: 0,0:10:19.24,0:10:23.24,Default,,0,0,0,,或者各个节点上的消息按照路径依次发送和接收\Nor that moves from the sending of a message to the receipt of that message,
Dialogue: 0,0:10:23.24,0:10:24.64,Default,,0,0,0,,消息从一个节点移动到另一个节点\Nand then moves through other nodes.
Dialogue: 0,0:10:24.64,0:10:26.32,Default,,0,0,0,,你可以在图中选择一条路径\NAnd you can take any path through this graph
Dialogue: 0,0:10:26.32,0:10:29.18,Default,,0,0,0,,沿路径依次按时间移动\Nas long as you're always moving forward in time,
Dialogue: 0,0:10:29.18,0:10:35.22,Default,,0,0,0,,这样就能从事件a开始 依次向下发生其他的事件\Nthen you will get from any a that happened before any other event.
Dialogue: 0,0:10:35.22,0:10:39.48,Default,,0,0,0,,举例来说 你可以从a走到f 即a→f\NAnd so, here, for example, you can get from a all the way to f, a→f,
Dialogue: 0,0:10:39.48,0:10:45.94,Default,,0,0,0,,因为你可以通过传递两条消息从a走到f\Nbecause you can go from a to f by traversing these two messages sents.
Dialogue: 0,0:10:47.14,0:10:50.22,Default,,0,0,0,,但你不能从a走到e\NBut, for example, you cannot get from a to e,
Dialogue: 0,0:10:50.22,0:10:55.24,Default,,0,0,0,,因为从a走到e要求倒转节点C的事件发生顺序\Nbecause going from a to e would require going backwards in the node order of C,
Dialogue: 0,0:10:55.24,0:10:56.72,Default,,0,0,0,,我们不允许发生这种情况\Nand that would not be allowed.
Dialogue: 0,0:10:56.72,0:11:01.46,Default,,0,0,0,,这也就意味着a‖e\NAnd so, that means that, for example, a‖e.
Dialogue: 0,0:11:01.46,0:11:05.60,Default,,0,0,0,,不满足a→e 也不满足e→a\NSo, a did not happen before e, e did not happen before a.
Dialogue: 0,0:11:05.60,0:11:08.66,Default,,0,0,0,,这两个事件是并发的 这两个事件相互独立\NThe two are simply concurrent, which means they are independent.
Dialogue: 0,0:11:08.66,0:11:11.86,Default,,0,0,0,,发生其中一个事件时不需要知道另一个事件是否已发生\NOne event did not know about the other when it happened.
Dialogue: 0,0:11:12.32,0:11:14.50,Default,,0,0,0,,并发与同步不是一个意思\NConcurrent does not literally mean simultaneous.
Dialogue: 0,0:11:14.50,0:11:17.30,Default,,0,0,0,,并发并不是说两个事件要在同一时间发生\NIt doesn't mean happened literally at the same instant in time.
Dialogue: 0,0:11:17.30,0:11:21.04,Default,,0,0,0,,并发只意味着两个事件在发生时不需要知道另一个事件是否已发生\NIt just means the two events did not know about each other when they occurred.
Dialogue: 0,0:11:21.04,0:11:24.48,Default,,0,0,0,,因此 a‖e 且b‖e\NAnd so, therefore, a‖e, b‖e.
Dialogue: 0,0:11:24.48,0:11:27.70,Default,,0,0,0,,a、b、c、d和e都满足并发关系\NAll a, b, c, and d, they're all concurrent to e.
Dialogue: 0,0:11:27.70,0:11:34.94,Default,,0,0,0,,但e和f不满足并发关系 因为用户C定义了e和f的发生顺序\NBut e and f are not concurrent, of course, because of the order on user C.
Dialogue: 0,0:11:34.94,0:11:37.54,Default,,0,0,0,,这就是此前发生关系\NSo, that's the happens-before relation.
Dialogue: 0,0:11:37.54,0:11:41.02,Default,,0,0,0,,此前发生关系与分布式系统中的因果关系\NAnd the happens-before relation is very closely connected to
Dialogue: 0,0:11:41.02,0:11:44.28,Default,,0,0,0,,有着非常紧密的联系\Nthe concept of causality in distributed systems.
Dialogue: 0,0:11:44.28,0:11:47.94,Default,,0,0,0,,如果a→b\NIn particular, if a→b,
Dialogue: 0,0:11:47.94,0:11:52.86,Default,,0,0,0,,这意味着a导致了b的发生 或a在某种程度上影响了b的发生\Nthen it might be the case that a caused b, or a influenced b in some way.
Dialogue: 0,0:11:52.86,0:11:56.94,Default,,0,0,0,,因此 a和b之间存在某个信息流\NSo, there's some information flow that has happened from a to b,
Dialogue: 0,0:11:58.02,0:12:01.52,Default,,0,0,0,,如果a和b是并发的\Nwhereas if the events a and b are concurrent,
Dialogue: 0,0:12:01.52,0:12:05.52,Default,,0,0,0,,我们知道a不可能导致b的发生 b也不可能导致a的发生\Nwe know that a cannot have caused b, and b cannot have caused a,
Dialogue: 0,0:12:05.52,0:12:08.20,Default,,0,0,0,,两个事件之间没有因果关系\Nthere's no causal relationship between the two.
Dialogue: 0,0:12:08.20,0:12:11.78,Default,,0,0,0,,因果关系的概念来自于物理学\NSo, this concept of causality is actually taken from Physics,
Dialogue: 0,0:12:12.58,0:12:18.86,Default,,0,0,0,,人们通过因果关系描述空间距离很远的事件发生关系\Nwhere typically people reason about events that happen far apart in space,
Dialogue: 0,0:12:18.86,0:12:25.02,Default,,0,0,0,,事件发生的传递时间就是光在两个事件空间距离上传递的时间\Nand the time that it takes is the speed of light to travel between those things.
Dialogue: 0,0:12:25.02,0:12:29.72,Default,,0,0,0,,如果在不同的星球上、甚至在不同的星系上\NSo, if you have two events happening on different planets, say,
Dialogue: 0,0:12:29.72,0:12:32.50,Default,,0,0,0,,发生了两个事件\Nor even in different galaxies,
Dialogue: 0,0:12:32.50,0:12:35.80,Default,,0,0,0,,两个事件的空间距离很远\Nand so, they are very far apart in space,
Dialogue: 0,0:12:35.80,0:12:39.18,Default,,0,0,0,,但这些事件几乎是同时发生的\Nbut you could have those events happening around about the same time.
Dialogue: 0,0:12:39.18,0:12:40.68,Default,,0,0,0,,这些事件不一定严格在同一时间发生\NThey don't have to be exactly at the same time,
Dialogue: 0,0:12:40.68,0:12:45.58,Default,,0,0,0,,它们可能会几乎在同一时间发生 但事件之间的空间距离很远\Nbut they're happening fairly close together in time, but fairly far apart in space,
Dialogue: 0,0:12:45.58,0:12:48.58,Default,,0,0,0,,此时 我们就可以绘制出这个空间-时间示意图了\Nthen we can draw this space-time diagram here.
Dialogue: 0,0:12:48.58,0:12:50.78,Default,,0,0,0,,我们可以绘制这样一个示意图\NSo, we can draw this diagram where
Dialogue: 0,0:12:50.78,0:12:57.82,Default,,0,0,0,,想象一下 当事件a发生时 你从事件a发出了一束光\Nimagine that you send out a beam of light from event a at the time when event a occurs,
Dialogue: 0,0:12:57.82,0:13:00.00,Default,,0,0,0,,你将这束光发送至周围所有的方向\Nand you send it out in all directions.
Dialogue: 0,0:13:00.00,0:13:05.32,Default,,0,0,0,,随着时间从上到下移动 空间从左到右移动\NAnd so, then, as time goes here downwards, and space is from left to right,
Dialogue: 0,0:13:05.32,0:13:12.28,Default,,0,0,0,,这束光以光速向空间传播\Nso, this light just spreads through space at the speed of light,
Dialogue: 0,0:13:12.28,0:13:18.54,Default,,0,0,0,,我们把光的传播范围称为光锥 任意在光锥内发生的事件\Nand any event that happens within this cone here, this is called a light cone,
Dialogue: 0,0:13:19.14,0:13:22.92,Default,,0,0,0,,这些事件的发生可能都依赖于a的发生\Nthat event might somehow be dependent on a.
Dialogue: 0,0:13:22.92,0:13:27.74,Default,,0,0,0,,但你可以看到 b在a的光锥之外\NBut you can see b here is way outside of the light cone of a.
Dialogue: 0,0:13:27.74,0:13:31.54,Default,,0,0,0,,同样地 a在b的光锥之外\NAnd also, a is outside of the light cone of b.
Dialogue: 0,0:13:31.54,0:13:37.86,Default,,0,0,0,,因此 当b发生时\NSo, the information from b at the time when b occurred
Dialogue: 0,0:13:37.86,0:13:41.52,Default,,0,0,0,,b的信息不可能在a发生之前传递到a\Ncould not possibly have got to a by the time a happened.
Dialogue: 0,0:13:41.52,0:13:44.14,Default,,0,0,0,,类似地 当a发生时\NAnd likewise, the information when a happened
Dialogue: 0,0:13:44.14,0:13:47.16,Default,,0,0,0,,a的信息不可能在b发生之前传递到b\Ncould not possibly have got to b by the time b happened,
Dialogue: 0,0:13:47.16,0:13:47.80,Default,,0,0,0,,原因很简单\Nsimply because
Dialogue: 0,0:13:47.80,0:13:51.54,Default,,0,0,0,,此类信息的传播速度要大于光速\Nthat would have required information to travel faster than the speed of light.
Dialogue: 0,0:13:51.54,0:13:54.36,Default,,0,0,0,,据我们所知 在我们的宇宙中\NAnd as far as we know, in our universe,
Dialogue: 0,0:13:54.36,0:13:58.40,Default,,0,0,0,,信息的传播速度不可能大于光速\Nit is not possible for information to travel faster than the speed of light.
Dialogue: 0,0:13:58.40,0:14:03.68,Default,,0,0,0,,因此 这里的事件c可能受a或b的影响\NSo, this event c here, for example, that could be influenced by a or b,
Dialogue: 0,0:14:04.44,0:14:07.46,Default,,0,0,0,,但b和a不可能相互影响\Nbut b and a cannot influence each other.
Dialogue: 0,0:14:07.46,0:14:11.42,Default,,0,0,0,,这个来自物理学的概念\NAnd so, this concept from Physics
Dialogue: 0,0:14:11.42,0:14:14.58,Default,,0,0,0,,与我们在分布式系统中引入的概念非常类似\Nis very closely related to what we have in distributed systems.
Dialogue: 0,0:14:14.58,0:14:18.92,Default,,0,0,0,,在分布式系统中 我们一般会讨论消息在网络中传输\NIn distributed systems, we typically talk about messages flowing over a network
Dialogue: 0,0:14:18.92,0:14:21.70,Default,,0,0,0,,而不是讨论光在宇宙中传播\Nrather than light traveling through the universe,
Dialogue: 0,0:14:21.70,0:14:23.36,Default,,0,0,0,,但本质思想是一样的\Nbut essentially, it's the same idea,
Dialogue: 0,0:14:23.36,0:14:28.24,Default,,0,0,0,,这两种思想都是在描述事件是否可能会互相受到影响\Nit's reasoning about which events could possibly have affected each other.
Dialogue: 0,0:14:28.24,0:14:34.58,Default,,0,0,0,,一旦我们定义好了潜在的因果关系和此前发生关系\NAnd once we have got this potential causality and this happens-before relationship,
Dialogue: 0,0:14:34.58,0:14:36.78,Default,,0,0,0,,我们就可以给事件排序了\Nwe can now order events.
Dialogue: 0,0:14:36.78,0:14:41.86,Default,,0,0,0,,回忆一下我们的例子 先发生了“月亮是奶酪做的！”\NAnd so, remember in our case of first “The moon is made of cheese!”,
Dialogue: 0,0:14:41.86,0:14:44.38,Default,,0,0,0,,随后是回复“不 不是的！”\Nand then the reply to it “Oh, no, it's not!”,
Dialogue: 0,0:14:44.38,0:14:45.60,Default,,0,0,0,,我们想要的是\Nwhat we want is
Dialogue: 0,0:14:45.60,0:14:51.92,Default,,0,0,0,,“月亮是奶酪做的！”要在对话线中先出现\Nfor “The moon is made of cheese!” to come first in this order of the conversation thread,
Dialogue: 0,0:14:51.92,0:14:54.68,Default,,0,0,0,,随后 对话线中再出现回复\Nand then, the reply to come second in that order.
Dialogue: 0,0:14:54.68,0:14:57.64,Default,,0,0,0,,两个事件存在因果关系\NAnd here, because we have a causal relationship
Dialogue: 0,0:14:57.64,0:15:00.84,Default,,0,0,0,,“月亮是奶酪做的！”的消息m_1\Nbetween m_1, which is “The moon is made of cheese!”,
Dialogue: 0,0:15:00.84,0:15:02.96,Default,,0,0,0,,和回复m_1的m_2\Nand m_2, which is the reply to m_1,
Dialogue: 0,0:15:02.96,0:15:05.42,Default,,0,0,0,,这两个事件存在因果关系\Nso, there's a causal relationship between the two.
Dialogue: 0,0:15:05.42,0:15:11.18,Default,,0,0,0,,因此 a→b 即m_1→m_2\NAnd so, therefore, a→b, m_1→m_2,
Dialogue: 0,0:15:11.18,0:15:13.08,Default,,0,0,0,,我们想要的是\Nwhat we want is that
Dialogue: 0,0:15:13.08,0:15:17.32,Default,,0,0,0,,对话线中的消息放置顺序应该与事件发生顺序保持一致\Nany order that we put the messages into should be consistent with that.
Dialogue: 0,0:15:17.32,0:15:23.64,Default,,0,0,0,,也就是说 只要a→b 那么根据因果顺序 a应该在b之前发生\NSo, whenever a→b, then a occurs before b in that causal order.
Dialogue: 0,0:15:23.64,0:15:25.54,Default,,0,0,0,,这叫做因果顺序\NThis is called a causal order,
Dialogue: 0,0:15:25.54,0:15:31.04,Default,,0,0,0,,即按照一定的顺序放置系统中的事件\Nthat is, it's a way of putting the events in the system into an order in such a way that
Dialogue: 0,0:15:31.04,0:15:33.26,Default,,0,0,0,,使事件满足因果关系\Nthey are consistent with causality,
Dialogue: 0,0:15:33.26,0:15:38.52,Default,,0,0,0,,如果一件事情在另一件事情前发生 则它们也应该按照此顺序出现\Nthat is, if one thing happened before another thing, then they appear in the correct order,
Dialogue: 0,0:15:38.52,0:15:41.92,Default,,0,0,0,,但如果两件事情是并发的 它们可以按照任意顺序出现\Nbut if two things are concurrent, then they could appear in either order,
Dialogue: 0,0:15:41.92,0:15:44.20,Default,,0,0,0,,因为一件事情可能在另一件事情发生前发生\Nbecause one could have happened before the other,
Dialogue: 0,0:15:44.20,0:15:47.22,Default,,0,0,0,,我们无法确定哪件事情先发生\Nthere's no real way of saying which one happened first.
Dialogue: 0,0:15:47.22,0:15:50.44,Default,,0,0,0,,此时 两件事情出现的顺序可以是任意的\NSo, in that case, they could be ordered arbitrarily.
Dialogue: 0,0:15:50.44,0:15:52.40,Default,,0,0,0,,这是一个非常有用的概念\NSo, this is a very useful concept.
Dialogue: 0,0:15:52.40,0:15:54.80,Default,,0,0,0,,我们将在下一节课使用这个概念\NAnd we're going to use this in the next lecture
Dialogue: 0,0:15:54.80,0:15:58.94,Default,,0,0,0,,后面 我们要在此前发生关系的基础上\Nwhen it comes to building upon this idea of the happens-before relationship,
Dialogue: 0,0:15:58.94,0:16:03.36,Default,,0,0,0,,构建可以实现此前发生关系的分布式算法\Nand making some actual distributed algorithms that implement this.
Dialogue: 0,0:16:03.36,0:16:05.74,Default,,0,0,0,,我想指出的最后一点是\NThe last thing I will just point out is
Dialogue: 0,0:16:05.74,0:16:10.06,Default,,0,0,0,,很容易混淆“因果”（causal）和“偶然”（casual）这两个词\Nit's very easy to confuse the word causal with the word casual,
Dialogue: 0,0:16:10.06,0:16:12.00,Default,,0,0,0,,因为这两个词只是中间的两个字母顺序不同\Nbecause just two letters are swept around.
Dialogue: 0,0:16:12.00,0:16:14.20,Default,,0,0,0,,我自己也会再三检查拼写是否正确\NI keep having to double check it myself as well.
Dialogue: 0,0:16:14.20,0:16:16.78,Default,,0,0,0,,大家在使用时要注意一下\NSo, just that as a little detail to watch out for.
Dialogue: 0,0:16:16.78,0:16:18.98,Default,,0,0,0,,如果你在撰写分布式系统相关的内容\NIf you're writing about distributed systems,
Dialogue: 0,0:16:18.98,0:16:21.48,Default,,0,0,0,,你要用的可能是“因果”而不是“偶然”\Nyou probably mean causal, not casual.
Dialogue: 0,0:16:21.48,0:16:23.48,Default,,0,0,0,,下节课见\NSo, see you next time.
