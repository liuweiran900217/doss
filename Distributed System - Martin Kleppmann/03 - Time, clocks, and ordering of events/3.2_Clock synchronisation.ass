[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 3.2_Clock synchronisation.mp4
Video File: 3.2_Clock synchronisation.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 163
Active Line: 179
Video Position: 19467

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:01.80,0:00:04.80,Default,,0,0,0,,接下来 我们将讨论时钟同步\NNext, we're going to talk about clock synchronization.
Dialogue: 0,0:00:04.80,0:00:09.44,Default,,0,0,0,,我们已经讲解过 每台计算机都会包含一个石英钟\NSo, we've established every computer pretty much contains a quartz clock,
Dialogue: 0,0:00:09.44,0:00:12.90,Default,,0,0,0,,计算机没有使用原子钟 因为原子钟过于昂贵也过于庞大\Nnot an atomic clock because atomic clocks are too expensive and too bulky.
Dialogue: 0,0:00:12.90,0:00:17.44,Default,,0,0,0,,我们要做的是 使用没那么精准的石英钟\NSo, what we need to do is make do with these less accurate quartz clocks,
Dialogue: 0,0:00:17.44,0:00:21.94,Default,,0,0,0,,尝试设计一种机制 让时钟保持相对精准\Nand we have to somehow try and make the clocks reasonably accurate nevertheless.
Dialogue: 0,0:00:21.94,0:00:24.94,Default,,0,0,0,,石英钟会出现一些漂移\NSo, these quartz clocks will drift a little bit
Dialogue: 0,0:00:24.94,0:00:27.88,Default,,0,0,0,,因为石英钟的振动频率\Nbecause their rate does not match up exactly with
Dialogue: 0,0:00:27.88,0:00:30.54,Default,,0,0,0,,无法完全匹配正确时钟的频率\Nwhat the correct clock tick rate should be.
Dialogue: 0,0:00:30.54,0:00:32.20,Default,,0,0,0,,这使得我们要面临时钟偏移问题\NAnd we end up with clock skew.
Dialogue: 0,0:00:32.20,0:00:36.92,Default,,0,0,0,,时钟偏移的意思是 如果我们在同一时刻查看两个不同的时钟\NSo, clock skew is if we look at two different clocks at the same instant in time,
Dialogue: 0,0:00:36.92,0:00:39.50,Default,,0,0,0,,对比两个时钟的时间戳\Nand we compare the timestamps from those clocks,
Dialogue: 0,0:00:39.50,0:00:41.48,Default,,0,0,0,,这两个时钟的时间戳会不一样 有一定的时间差\Nclocks use the difference between those two.
Dialogue: 0,0:00:41.48,0:00:45.18,Default,,0,0,0,,时钟同步想要实现的目标是\NAnd what we want to do with clock synchronization is
Dialogue: 0,0:00:45.18,0:00:47.88,Default,,0,0,0,,让时钟偏移尽可能小\Nto minimize the skew as much as possible.
Dialogue: 0,0:00:47.88,0:00:49.94,Default,,0,0,0,,我们定义了不同的网络类型\NNow, in the types of networks that we have,
Dialogue: 0,0:00:49.94,0:00:52.38,Default,,0,0,0,,在异步网络或部分同步网络中\Nin asynchronous or partially synchronous networks,
Dialogue: 0,0:00:52.38,0:00:55.48,Default,,0,0,0,,我们无法把时钟偏移量降低到0\Nit is not possible to reduce the clock skew to 0.
Dialogue: 0,0:00:55.48,0:00:58.60,Default,,0,0,0,,我们能做到的是尽可能降低时钟偏移量\NThe best we can do is to reduce it as much as we can,
Dialogue: 0,0:00:58.60,0:01:02.40,Default,,0,0,0,,但无论如何降低 时钟总会存在一定程度的偏移量\Nbut there's always going to be a bit of an error tolerance remaining.
Dialogue: 0,0:01:02.40,0:01:06.32,Default,,0,0,0,,实际中一般实现时钟同步的方法是\NNow, the way that we typically do clock synchronization in practice is
Dialogue: 0,0:01:06.32,0:01:09.52,Default,,0,0,0,,使用一个叫NTP的协议 即网络时间协议\Nusing a protocol called NTP, the Network Time Protocol.
Dialogue: 0,0:01:09.52,0:01:13.80,Default,,0,0,0,,还有一个叫PTP的协议 但本课程不会介绍PTP协议\NThere's also another protocol called PTP, but we won't talk about that in this course.
Dialogue: 0,0:01:13.80,0:01:15.86,Default,,0,0,0,,NTP的工作原理是\NAnd the way NTP works is that
Dialogue: 0,0:01:15.86,0:01:19.36,Default,,0,0,0,,假定服务器有一个精准的时钟源\Nthere's a server and we assume the server has some accurate clock source
Dialogue: 0,0:01:19.36,0:01:22.14,Default,,0,0,0,,服务器的时钟源可能是原子钟或者GPS接收器\Nsuch as an atomic clock or a GPS receiver.
Dialogue: 0,0:01:22.14,0:01:26.22,Default,,0,0,0,,客户端可以问询服务器 询问服务器的当前时间\NAnd clients can query the server and ask it for the server's current time,
Dialogue: 0,0:01:26.22,0:01:31.20,Default,,0,0,0,,随后 客户端将根据服务端返回的时间调整自己的时间\Nand then, the client will adjust its own time based on the time that it got from the server.
Dialogue: 0,0:01:31.20,0:01:33.72,Default,,0,0,0,,NTP的应用非常广泛\NSo, NTP is very widely deployed.
Dialogue: 0,0:01:33.72,0:01:37.50,Default,,0,0,0,,几乎现在使用的所有操作系统都会内置NTP协议\NAlmost all operating systems that are used nowadays have NTP built in.
Dialogue: 0,0:01:37.50,0:01:40.56,Default,,0,0,0,,例如 macOS中的日期与时间对话框看起来像这样\NSo, for example, in macOS the settings dialog looks like this.
Dialogue: 0,0:01:40.56,0:01:44.08,Default,,0,0,0,,你可以在这里选择NTP服务器 或者自己输入一个\NHere you can choose the NTP server here or type in your own.
Dialogue: 0,0:01:44.08,0:01:48.82,Default,,0,0,0,,我这里将time.euro.apple.com作为我自己的时间服务器\NIn this case, I've got time.euro.apple.com as my time server.
Dialogue: 0,0:01:49.36,0:01:52.30,Default,,0,0,0,,其他多数操作系统也有一个非常类似的日期与时间对话框\NBut most other operating systems will have a very similar looking dialog
Dialogue: 0,0:01:52.30,0:01:56.66,Default,,0,0,0,,你也可以调整并选择你想使用的NTP服务器\Nwhere also you can adjust and choose your NTP server if you want it.
Dialogue: 0,0:01:56.66,0:02:03.98,Default,,0,0,0,,NTP协议的工作原理是 服务器会分阶层组织\NNow, the way that NTP works is that servers are arranged into what are called strata.
Dialogue: 0,0:02:03.98,0:02:10.26,Default,,0,0,0,,阶层0就是一个准确时间源 时间源为原子钟或GPS接收器\NSo, Stratum 0 is just the accurate time sources, that is, atomic clocks or GPS receivers.
Dialogue: 0,0:02:10.26,0:02:16.00,Default,,0,0,0,,阶层1是一个服务器 此服务器直接与阶层0的时间源相连接\NStratum 1 is a server that is connected directly to a Stratum 0 time source.
Dialogue: 0,0:02:16.00,0:02:21.42,Default,,0,0,0,,阶层2也是一个服务器 此服务器不直接与准确的时间源相连接\NStratum 2 is a server that is not directly connected to an accurate time source,
Dialogue: 0,0:02:21.42,0:02:24.48,Default,,0,0,0,,阶层2的服务器会从阶层1的服务器那里得到时间\Nbut which gets its time from a Stratum 1 server.
Dialogue: 0,0:02:24.48,0:02:29.88,Default,,0,0,0,,阶层3的服务器会从阶层2的服务器那里得到时间 以此类推\NAnd Stratum 3 server gets its clock from a Stratum 2 server, and so on.
Dialogue: 0,0:02:29.88,0:02:34.74,Default,,0,0,0,,协议会使用一系列统计技术和技巧\NAnd so, there are whole bunch of statistical techniques and tricks that are used
Dialogue: 0,0:02:34.74,0:02:39.12,Default,,0,0,0,,尝试提高时间的估计质量\Nin order to try and improve the quality of our estimates of time.
Dialogue: 0,0:02:39.12,0:02:41.38,Default,,0,0,0,,举例来说 NTP使用的其中一个技巧是\NSo, one thing that NTP does is, for example,
Dialogue: 0,0:02:41.38,0:02:43.98,Default,,0,0,0,,在条件允许的情况下 问询多个服务器\Nto query multiple servers if they are available,
Dialogue: 0,0:02:43.98,0:02:44.92,Default,,0,0,0,,因为可能会出现的情况是\Nbecause it could be that
Dialogue: 0,0:02:44.92,0:02:47.94,Default,,0,0,0,,其中一个服务器因配置错误等原因出现了故障\None of those servers is misconfigured or it's got a fault or something,
Dialogue: 0,0:02:47.94,0:02:50.76,Default,,0,0,0,,此服务器报告的时间可能会非常不准确\Nand so, it's reporting a wildly inaccurate time.
Dialogue: 0,0:02:50.76,0:02:53.76,Default,,0,0,0,,因此 如果你问询了三个或五个服务器\NAnd so, if you're querying three servers or five servers,
Dialogue: 0,0:02:53.76,0:02:58.28,Default,,0,0,0,,你可以说其中一个服务器可能出现了异常\Nthen you can to tell if there's one of the servers which is a real outlier.
Dialogue: 0,0:02:58.28,0:03:00.66,Default,,0,0,0,,其他服务器返回的时间都非常接近\Nand the other servers are all quite close together.
Dialogue: 0,0:03:00.66,0:03:03.32,Default,,0,0,0,,此时 NTP协议就可以排除异常值\NIn that case, NTP can exclude that outlier,
Dialogue: 0,0:03:03.32,0:03:08.16,Default,,0,0,0,,只保留服务器发来的、看起来更可靠的数据点\Nand just keep the data points from the servers that seem to be reliable.
Dialogue: 0,0:03:08.16,0:03:11.32,Default,,0,0,0,,另一个使用的技巧是 不止问询一次服务端时间\NAnother technique that is used is to query a server not just once,
Dialogue: 0,0:03:11.32,0:03:14.02,Default,,0,0,0,,而是在几分钟时间内多次问询服务端时间\Nbut multiple times over the course of several minutes.
Dialogue: 0,0:03:14.02,0:03:16.16,Default,,0,0,0,,我们希望用这种方式\NAnd so, that will then ensure that
Dialogue: 0,0:03:16.16,0:03:20.92,Default,,0,0,0,,消除网络中可能出现的随机网络延迟\Nat least any random variations in network delay can hopefully get filtered out.
Dialogue: 0,0:03:20.92,0:03:24.00,Default,,0,0,0,,如果网络延时是系统延迟导致的\NNow, if there's systematic variations in network delay,
Dialogue: 0,0:03:24.00,0:03:25.78,Default,,0,0,0,,那多次采样结果无法提高准确性\Nhaving multiple samples won't help you.
Dialogue: 0,0:03:25.78,0:03:28.86,Default,,0,0,0,,但多次采样结果至少可以帮助我们降低随机误差\NBut at least multiple samples will reduce the random error.
Dialogue: 0,0:03:28.86,0:03:32.62,Default,,0,0,0,,对于NTP来说 如果你使用的是一个高质量网络连接\NAnd with NTP, if you have a good quality network connection,
Dialogue: 0,0:03:32.62,0:03:35.22,Default,,0,0,0,,那经过同步后 你的时钟与服务器的时钟偏差\Nit is possible to get your clock synchronized to the server
Dialogue: 0,0:03:35.22,0:03:38.40,Default,,0,0,0,,可以降低到毫秒级\Nwithin a couple of milliseconds skew.
Dialogue: 0,0:03:38.40,0:03:41.50,Default,,0,0,0,,如果你使用的是一个低质量网络连接\NIf you are on a poor-quality network connection,
Dialogue: 0,0:03:41.50,0:03:47.20,Default,,0,0,0,,例如一个繁忙的Wi-Fi连接 或者负载较大的互联网连接\Nover some kind of busy Wi-Fi, over heavily loaded Internet connection,
Dialogue: 0,0:03:47.20,0:03:49.86,Default,,0,0,0,,则时钟同步的准确性会大大降低\Nthen the accuracy could be much much worse than that.
Dialogue: 0,0:03:49.86,0:03:55.78,Default,,0,0,0,,因此 使用同步时钟假设时要特别小心\NSo, you always have to be careful when assuming synchronized clocks.
Dialogue: 0,0:03:55.78,0:03:58.84,Default,,0,0,0,,现在 我们来看看\NNow, let's have a look at
Dialogue: 0,0:03:58.84,0:04:03.64,Default,,0,0,0,,NTP协议如何估计客户端与服务器的时钟偏移\Nhow NTP estimates the clock skew between the client and the server.
Dialogue: 0,0:04:03.64,0:04:07.80,Default,,0,0,0,,此协议的第一步仍然是向网络中发送一条消息\NIt works by sending a message over a network, again, as usual.
Dialogue: 0,0:04:07.80,0:04:12.00,Default,,0,0,0,,客户端向服务器发送一条请求消息\NSo, we have a request message that could send from the client to the server.
Dialogue: 0,0:04:12.00,0:04:14.54,Default,,0,0,0,,当客户端发送的此条消息\NAnd as the client is sending this message,
Dialogue: 0,0:04:14.54,0:04:18.10,Default,,0,0,0,,包含了客户端时钟返回的时间戳\Nit records the clock according to the client's timestamp,
Dialogue: 0,0:04:18.10,0:04:22.18,Default,,0,0,0,,t_1表示客户端发送此条消息的客户端时间戳\Nthe timestamp t_1, which is the timestamp at which the client sent out this message.
Dialogue: 0,0:04:22.18,0:04:25.64,Default,,0,0,0,,客户端将时间戳t_1拷贝到请求消息中\NAnd it copies that timestamp t_1 into the request message.
Dialogue: 0,0:04:25.64,0:04:28.20,Default,,0,0,0,,NTP服务器收到此消息后\NThe NTP server, when it receives that message,
Dialogue: 0,0:04:28.20,0:04:31.84,Default,,0,0,0,,也记录下服务器时钟返回的时间戳\Nit will also record the time according to the server's own clock
Dialogue: 0,0:04:31.84,0:04:39.18,Default,,0,0,0,,t_2表示服务器收到请求时的服务器时间戳\Nat which it received that message, we'll call that t_2.
Dialogue: 0,0:04:39.18,0:04:42.42,Default,,0,0,0,,现在 服务器需要花费一点时间处理此条消息\NNow, the server might take a little bit of time to process the message,
Dialogue: 0,0:04:42.42,0:04:44.70,Default,,0,0,0,,最终 服务器将会回复此条消息\Nbut eventually, the server will reply.
Dialogue: 0,0:04:45.18,0:04:48.70,Default,,0,0,0,,t_3表示服务器发送响应时\NAnd t_3 is the timestamp according to the server’s clock
Dialogue: 0,0:04:48.70,0:04:51.12,Default,,0,0,0,,服务器时钟返回的时间戳\Nat which the response got sent out.
Dialogue: 0,0:04:51.12,0:04:54.34,Default,,0,0,0,,现在 响应将包含3个时间戳\NSo now, the response is going to contain all 3 timestamps so far.
Dialogue: 0,0:04:54.34,0:04:58.02,Default,,0,0,0,,t_1只是从请求拷贝到响应中\NSo, t_1 simply gets copied from the request over to the response.
Dialogue: 0,0:04:58.02,0:05:00.54,Default,,0,0,0,,服务端不对t_1进行任何处理\NThe server doesn't do anything with t_1.
Dialogue: 0,0:05:00.54,0:05:03.04,Default,,0,0,0,,t_2和t_3来自于服务器的时钟\Nt_2 and t_3 came from the server’s clock,
Dialogue: 0,0:05:03.04,0:05:07.56,Default,,0,0,0,,分别为服务器收到请求和发送响应的时间戳\Nas the arrival time and the response time, respectively.
Dialogue: 0,0:05:07.56,0:05:11.00,Default,,0,0,0,,最终 当客户端收到响应时\NAnd finally, when the response is received by the client,
Dialogue: 0,0:05:11.00,0:05:15.14,Default,,0,0,0,,客户端再次记录下收到响应时\Nthe client again records the timestamp according to the client's clock
Dialogue: 0,0:05:15.14,0:05:17.12,Default,,0,0,0,,客户端时钟返回的时间戳\Nat when that response was received.
Dialogue: 0,0:05:17.12,0:05:19.40,Default,,0,0,0,,我们现在有了4个时间戳\NAnd so, we have now 4 timestamps.
Dialogue: 0,0:05:19.40,0:05:20.46,Default,,0,0,0,,根据这些时间戳\NAnd from those timestamps,
Dialogue: 0,0:05:20.46,0:05:24.64,Default,,0,0,0,,我们尝试计算出两个时钟间的偏移量\Nwe're going to try to work out what the skew is between the two clocks.
Dialogue: 0,0:05:24.64,0:05:26.26,Default,,0,0,0,,首先 我们可以计算出\NSo, first of all, we can work out
Dialogue: 0,0:05:26.26,0:05:29.40,Default,,0,0,0,,消息在网络中的传输时间\Nhow long that the message is spent traveling through the network.
Dialogue: 0,0:05:29.40,0:05:32.62,Default,,0,0,0,,我们把总网络延迟时间记为δ\NAnd we're going to call that the total network delay δ.
Dialogue: 0,0:05:32.62,0:05:35.20,Default,,0,0,0,,我们首先计算t_4-t_1\NAnd that time has got to be t_4-t_1,
Dialogue: 0,0:05:35.20,0:05:39.70,Default,,0,0,0,,站在客户端的视角看 此时间等于\Nso, that is the total time that it's spent from the client's point of view
Dialogue: 0,0:05:39.70,0:05:43.22,Default,,0,0,0,,客户端发送请求到收到响应的总时间差\Nfrom the time it sent the request to the time it received a response,
Dialogue: 0,0:05:43.22,0:05:47.54,Default,,0,0,0,,再用这个时间差减去服务端的总处理时间\Nminus the time that the message was spent processing on the server,
Dialogue: 0,0:05:47.54,0:05:50.82,Default,,0,0,0,,也就是减去t_3-t_2 这就是服务端的总处理时间\Nso, minus t_3-t_2, which is the processing time on the server.
Dialogue: 0,0:05:50.82,0:05:55.92,Default,,0,0,0,,这两个时间差的差值等于\NAnd the remaining time has got to be then the total time
Dialogue: 0,0:05:55.92,0:06:00.26,Default,,0,0,0,,发送的请求和接收的响应在网络中的总时延\Nthat was spent in the network by the response and the request taken together.
Dialogue: 0,0:06:00.26,0:06:03.12,Default,,0,0,0,,现在 我们不知道如何将总时延拆分为发送时延和接收时延\NNow, what we don't know is the breakdown of those two,
Dialogue: 0,0:06:03.12,0:06:05.80,Default,,0,0,0,,发送时延为请求在网络中的传输时间\Nhow much time that the request spent in the network,
Dialogue: 0,0:06:05.80,0:06:09.44,Default,,0,0,0,,接收时延为响应在网络中的传输时间\Nand how much time that the response spent in a network.
Dialogue: 0,0:06:09.44,0:06:14.14,Default,,0,0,0,,你需要两个已完成同步的时钟才能计算出单向网络时延\NIf you want to work out that one-way network latency, you need synchronized clocks.
Dialogue: 0,0:06:14.14,0:06:16.36,Default,,0,0,0,,但我们这里要完成的工作就是\NAnd the whole point of this exercise here is that
Dialogue: 0,0:06:16.36,0:06:20.08,Default,,0,0,0,,我们没有已完成同步的时钟 我们需要构建同步时钟\Nwe don't have a synchronized clock. We're trying to build a synchronized clock.
Dialogue: 0,0:06:20.08,0:06:23.66,Default,,0,0,0,,因此 我们没办法度量出单向网络时延\NSo, we don't have a way of measuring that one-way network latency.
Dialogue: 0,0:06:23.66,0:06:28.78,Default,,0,0,0,,我们只能度量出两个网络时延的求和结果\NWe can only measure the sum of the two network latencies, put together.
Dialogue: 0,0:06:28.78,0:06:31.64,Default,,0,0,0,,但我们可以做一个假设\NBut what we can do is just make an assumption that
Dialogue: 0,0:06:31.64,0:06:34.02,Default,,0,0,0,,假设两个方向的网络时延是对称相等的\Nthe network latency is symmetric in both directions.
Dialogue: 0,0:06:34.02,0:06:38.80,Default,,0,0,0,,我们假设请求时延等于响应时延\NSo, we're going to assume that the request latency is the same as the response latency.
Dialogue: 0,0:06:38.80,0:06:42.98,Default,,0,0,0,,如果假设成立 则响应时延等于Δ/2\NAnd if this is true, then the response latency will be Δ/2,
Dialogue: 0,0:06:42.98,0:06:45.82,Default,,0,0,0,,因为响应时延等于总时延的一半\Nbecause it's just going to be half of the total delay.
Dialogue: 0,0:06:45.82,0:06:51.60,Default,,0,0,0,,这意味着我们可以估计出\NSo, this means now we can estimate the timestamp that the server should have
Dialogue: 0,0:06:51.60,0:06:55.84,Default,,0,0,0,,当服务器收到响应时 服务器的时间戳取值\Nat the moment in time when the response is received by the client.
Dialogue: 0,0:06:55.84,0:06:59.12,Default,,0,0,0,,从客户端的视角看 服务器收到响应的时间戳应为t_4\NSo, from the client's point of view, it's time t_4.
Dialogue: 0,0:06:59.12,0:07:02.62,Default,,0,0,0,,但我们知道服务器是在t_3发送的响应\NBut we know that the server sent its response at t_3.
Dialogue: 0,0:07:02.62,0:07:07.62,Default,,0,0,0,,而我们估计出响应的网络传输时延为Δ/2\NAnd we're going to estimate that the response spent Δ/2 traveling through the network.
Dialogue: 0,0:07:07.62,0:07:09.64,Default,,0,0,0,,因此 我们可以估计出\NAnd so, we're going to estimate that at the time
Dialogue: 0,0:07:09.64,0:07:12.30,Default,,0,0,0,,当客户端收到响应时\Nwhen the client receives the response,
Dialogue: 0,0:07:12.30,0:07:18.44,Default,,0,0,0,,服务器时钟的时间戳应为t_3+Δ/2\Nthe clock on the server, says t_3+Δ/2, that's our estimate of the server's clock.
Dialogue: 0,0:07:18.44,0:07:22.16,Default,,0,0,0,,估计出服务器的时钟情况后 我们就可以估计出时钟偏移量了\NNow that we have an estimate of the server’s clock, we can estimate the clock skew
Dialogue: 0,0:07:22.16,0:07:25.04,Default,,0,0,0,,因为我们可以用估计出的服务器时间戳\Nbecause we can just take our estimates of the server’s clock,
Dialogue: 0,0:07:25.04,0:07:28.26,Default,,0,0,0,,减去客户端时间戳t_4\Nminus t_4, which is the client's clock, and that will give us
Dialogue: 0,0:07:28.26,0:07:32.00,Default,,0,0,0,,这两个时间戳的差值就等于两个时钟的偏移量\Nthe instantaneous difference in time between the two clocks at that moment.
Dialogue: 0,0:07:32.00,0:07:35.74,Default,,0,0,0,,如果将Δ代入到表达式 并对表达式化简\NAnd then, if you substitute in Δ and simplify the expression,
Dialogue: 0,0:07:35.74,0:07:37.72,Default,,0,0,0,,你就得到了这样一个表达式\Nyou get this expression here,
Dialogue: 0,0:07:38.50,0:07:43.38,Default,,0,0,0,,这就是我们得到的时钟偏移量最优估计值\Nwhich is our best estimate that we can do of what the clock skew is.
Dialogue: 0,0:07:43.38,0:07:46.04,Default,,0,0,0,,现在 我们估计出了两个时钟的偏移量\NNow that we have the skew between the two clocks,
Dialogue: 0,0:07:46.04,0:07:50.72,Default,,0,0,0,,客户端可以修正自己的时钟 从而与服务器的时钟保持同步\Nthe client can correct its own clock and tries to bring it in sync with the server.
Dialogue: 0,0:07:50.72,0:07:56.68,Default,,0,0,0,,此时 客户端的处理方式取决于时钟偏移有多大\NAnd what the client does in that situation now depends on how big the clock skew is.
Dialogue: 0,0:07:56.68,0:08:00.64,Default,,0,0,0,,我们先来看看时钟偏移比较小的情况\NSo, firstly, let's look at the case where the clock skew is fairly small.
Dialogue: 0,0:08:00.64,0:08:04.32,Default,,0,0,0,,当时钟偏移θ小于125毫秒时\NSo, let's say θ is less than 125 milliseconds.
Dialogue: 0,0:08:04.32,0:08:07.28,Default,,0,0,0,,客户端的处理方式是\NIn this case, what the client is going to do is
Dialogue: 0,0:08:07.28,0:08:11.52,Default,,0,0,0,,稍微加快或减慢客户端时钟的频率\Nto slightly speed up or slow down its clock as necessary,
Dialogue: 0,0:08:11.52,0:08:15.00,Default,,0,0,0,,从而使客户端时钟与服务器时钟保持一致\Nin order to bring it in line with what the server is.
Dialogue: 0,0:08:15.00,0:08:20.50,Default,,0,0,0,,客户端时钟的频率变化不会超过500ppm\NAnd so, it's going to change its clock rate at most by 500ppm,
Dialogue: 0,0:08:20.50,0:08:24.50,Default,,0,0,0,,即客户端时钟每秒调整量最大不会超过0.5毫秒\Nso, at most by half a millisecond per second adjustment.
Dialogue: 0,0:08:24.50,0:08:26.86,Default,,0,0,0,,这样一来 我们期望在数分钟后\NAnd so, over the course of a couple of minutes,
Dialogue: 0,0:08:26.86,0:08:29.32,Default,,0,0,0,,客户端时钟与服务器时钟\Nthis means that hopefully the client clock and the server clock
Dialogue: 0,0:08:29.32,0:08:33.44,Default,,0,0,0,,将会逐渐保持同步 收敛到相同的状态\Nwill sort of drift together and converge towards the same state.
Dialogue: 0,0:08:33.44,0:08:38.42,Default,,0,0,0,,在NTP协议中 这一步骤称为倒转时钟\NAnd this is called slewing the clock, that is the term that NTP uses for this.
Dialogue: 0,0:08:38.42,0:08:42.38,Default,,0,0,0,,如果客户端和服务端的时钟偏移量太大了\NIf the skew is too big between the client and the server,
Dialogue: 0,0:08:42.38,0:08:46.54,Default,,0,0,0,,NTP协议将会步进时钟\Nthen NTP is going to step the clock,
Dialogue: 0,0:08:46.54,0:08:49.54,Default,,0,0,0,,意思是NTP协议将会强制调整时钟\Nwhich means it's simply going to forcibly adjust the clock.
Dialogue: 0,0:08:50.08,0:08:53.98,Default,,0,0,0,,这意味着客户端时钟将会突然向前或者向后跳转\NSo, even if this might mean moving the clock backwards or moving it forward,
Dialogue: 0,0:08:53.98,0:08:58.10,Default,,0,0,0,,客户端时钟将会直接跳转到估计出的服务器时钟状态\Nbut it's just going to jump right to the timestamp estimated from the server clock,
Dialogue: 0,0:08:58.10,0:09:01.88,Default,,0,0,0,,随后 客户端才会再次尝试平滑调整时钟\Nand from then onwards, it's going to try and do everything smoothly.
Dialogue: 0,0:09:01.88,0:09:07.70,Default,,0,0,0,,这意味着当客户端步进时钟时 时钟会出现不连续的情况\NBut there is this initial discontinuity of time where the client steps its clock.
Dialogue: 0,0:09:07.70,0:09:11.36,Default,,0,0,0,,最后 NTP还可能出现的一种处理方式是\NAnd finally, it could happen that NTP decides that
Dialogue: 0,0:09:11.36,0:09:14.18,Default,,0,0,0,,客户端和服务端的时钟偏移太大了\Nthe skew between the client and the server is so big
Dialogue: 0,0:09:14.18,0:09:17.68,Default,,0,0,0,,NTP拒绝调整时钟 NTP会说\Nthat NTP refuses to adjust the clock. It just says,
Dialogue: 0,0:09:17.68,0:09:18.96,Default,,0,0,0,,“不 我不会做任何调整”\N“No, I'm not going to do anything.”
Dialogue: 0,0:09:18.96,0:09:20.90,Default,,0,0,0,,“我认为一定有什么地方出了大错”\N“I'm going to assume that something has gone very wrong.”
Dialogue: 0,0:09:20.90,0:09:24.24,Default,,0,0,0,,“我不知道是客户端的时钟出了大错 还是服务器的时钟出了大错”\N“I don't know if the client's clock is very wrong or the server's clock is very wrong.”
Dialogue: 0,0:09:24.24,0:09:27.24,Default,,0,0,0,,“但肯定出现了糟糕的情况 我不会做任何调整”\N“But this is just so bad. I'm not going to do anything here.”
Dialogue: 0,0:09:27.24,0:09:31.46,Default,,0,0,0,,“我把问题留给人工操作 让人类自己去解决吧”\N“It's going to leave the adjustment for the human operator to solve”.
Dialogue: 0,0:09:31.46,0:09:36.24,Default,,0,0,0,,这也意味着 如果你有一个依赖于时钟同步的软件\NSo, this means now if you do have software that is relying on clocks being synchronized,
Dialogue: 0,0:09:36.24,0:09:40.68,Default,,0,0,0,,你就必须要特别小心 别让时钟偏移太大\Nyou have to be very careful to actually measure the clock skew between the clocks
Dialogue: 0,0:09:40.68,0:09:42.84,Default,,0,0,0,,确保时钟偏移不要过大\Nand make sure that it doesn't get too big,
Dialogue: 0,0:09:42.84,0:09:46.92,Default,,0,0,0,,因为NTP客户端可能会处于恐慌状态\Nbecause it could happen that an NTP client ends up in this panic state,
Dialogue: 0,0:09:46.92,0:09:51.28,Default,,0,0,0,,拒绝将自己的时钟与服务器时钟同步\Nand just refuses to sync its clock with the server.
Dialogue: 0,0:09:51.28,0:09:54.98,Default,,0,0,0,,如果NTP客户端认为时钟错的离谱\NAnd so, you've got then an NTP client whose clock is way off.
Dialogue: 0,0:09:54.98,0:09:59.08,Default,,0,0,0,,如果客户端与服务器的时钟偏移超过大约半个小时\NIt might be half an hour or more wrong compared to the server.
Dialogue: 0,0:09:59.08,0:10:01.22,Default,,0,0,0,,NTP协议就不会纠正客户端时钟了\NAnd NTP is not going to correct it.
Dialogue: 0,0:10:01.22,0:10:03.26,Default,,0,0,0,,因此 如果你有一个依赖于时钟同步的软件\NSo, you do have to be very careful
Dialogue: 0,0:10:03.26,0:10:06.50,Default,,0,0,0,,你需要特别小心 不能让时钟偏移过大\Nif you have software that assumes synchronized clocks.
Dialogue: 0,0:10:06.50,0:10:09.14,Default,,0,0,0,,这是调节时钟偏移的一个实例\NThis is an example of slewing in action.
Dialogue: 0,0:10:09.14,0:10:14.44,Default,,0,0,0,,图中的红线表示两个时钟的偏移量\NSo, you can see here the red line here is the skew, the offset between the two clocks.
Dialogue: 0,0:10:14.44,0:10:16.80,Default,,0,0,0,,最开始 时钟偏移约为10毫秒\NAnd it starts off at about 10 milliseconds offset
Dialogue: 0,0:10:16.80,0:10:22.82,Default,,0,0,0,,随后 时钟逐渐开始纠偏 最终的时钟偏移量在0毫秒左右摆动\Nand then the correction gets applied, so that it ends up being round about 0 clock skew.
Dialogue: 0,0:10:22.82,0:10:29.18,Default,,0,0,0,,蓝色线是客户端时钟的节拍率\NAnd the blue line is the tick rate at which the client clock is running.
Dialogue: 0,0:10:29.18,0:10:36.04,Default,,0,0,0,,客户端将自己时钟的节拍率调慢了大约45ppm\NAnd so, the client here has applied slewing up to about minus 45ppm.
Dialogue: 0,0:10:36.04,0:10:40.10,Default,,0,0,0,,这意味着客户端的石英晶体振动频率有一点快\NSo, that means that the quartz crystal in the client must have been a bit fast.
Dialogue: 0,0:10:40.10,0:10:43.08,Default,,0,0,0,,大约快了45ppm\NIt was running a bit fast by about 45 ppm.
Dialogue: 0,0:10:43.08,0:10:48.90,Default,,0,0,0,,将石英调慢45ppm后\NAnd by slowing down the quartz by 45 ppm,
Dialogue: 0,0:10:48.90,0:10:55.50,Default,,0,0,0,,NTP客户端将其时钟的节拍率调整到几乎与服务器节拍率相同\Nnow the NTP client has brought the tick rate of the client roughly in line with the server.
Dialogue: 0,0:10:55.50,0:10:56.14,Default,,0,0,0,,现在\NSo now,
Dialogue: 0,0:10:56.14,0:11:01.48,Default,,0,0,0,,两个时钟的节拍率几乎一致 客户端时钟不再漂移了\Nboth clocks are moving ahead at about the same rate and no longer drifting apart.
Dialogue: 0,0:11:01.48,0:11:03.24,Default,,0,0,0,,调整效果非常好\NSo, this is very nice.
Dialogue: 0,0:11:03.24,0:11:06.20,Default,,0,0,0,,NTP协议带来的问题是\NBut the consequence of NTP is that
Dialogue: 0,0:11:06.20,0:11:09.28,Default,,0,0,0,,你在撰写特定代码时要非常小心\Nyou have to be very careful when writing certain pieces of code.
Dialogue: 0,0:11:09.28,0:11:10.90,Default,,0,0,0,,这里给出了一段代码\NSo, this is a piece of code
Dialogue: 0,0:11:10.90,0:11:14.50,Default,,0,0,0,,大部分软件中都有可能出现类似的这段代码\Nthat is very likely going to occur in all sorts of different software,
Dialogue: 0,0:11:14.50,0:11:18.26,Default,,0,0,0,,这段代码包含了完成某些操作的函数doSomething()\Nwhere you have some function that does something, doSomething() here.
Dialogue: 0,0:11:18.26,0:11:21.26,Default,,0,0,0,,你希望度量出这个函数的执行时间\NAnd you want to measure how long that function takes to run.
Dialogue: 0,0:11:21.26,0:11:23.42,Default,,0,0,0,,为了度量出执行时间\NAnd so, in order to measure that time,
Dialogue: 0,0:11:23.42,0:11:27.78,Default,,0,0,0,,你在函数开始执行前先让时钟返回一个时间戳\Nyou simply take a timestamp from the clock before you start the function,
Dialogue: 0,0:11:27.78,0:11:30.08,Default,,0,0,0,,你在函数执行完毕后再让时钟返回一个时间戳\Nand you take another timestamp after you finish the function,
Dialogue: 0,0:11:30.08,0:11:32.84,Default,,0,0,0,,计算两个时间戳的差值 得到函数的执行时间\Nand then, you calculate the difference between the two.
Dialogue: 0,0:11:32.84,0:11:34.70,Default,,0,0,0,,这是用Java撰写的一个例子\NThis is an example here in Java,
Dialogue: 0,0:11:34.70,0:11:37.80,Default,,0,0,0,,但使用其他程序语言也可以撰写出类似的例子\Nbut this could just as well be in any other programming language.
Dialogue: 0,0:11:37.80,0:11:39.52,Default,,0,0,0,,并不只有Java才有这个问题\NIt's not specific to Java.
Dialogue: 0,0:11:39.52,0:11:44.82,Default,,0,0,0,,这里可能发生的事情是 当你在执行中间的doSomething()函数时\NNow, what could happen is that NTP decides to step the clock right
Dialogue: 0,0:11:44.82,0:11:48.80,Default,,0,0,0,,NTP决定步进时钟\Nwhile you're in the middle of executing this doSomething() function.
Dialogue: 0,0:11:48.80,0:11:51.06,Default,,0,0,0,,步进时钟意味着\NAnd stepping the clock means that
Dialogue: 0,0:11:51.06,0:11:57.12,Default,,0,0,0,,doSomething()后面的currentTimeMillies()所返回的时间戳\Nnow the timestamp returned by currentTimeMillies() after the doSomething()
Dialogue: 0,0:11:57.12,0:12:00.42,Default,,0,0,0,,可能与前面返回的时间戳有巨大的差距\Nis going to be somehow wildly different from what it was before.
Dialogue: 0,0:12:00.42,0:12:03.94,Default,,0,0,0,,时钟可能会被回调\NSo, it could be that the clock was moved backwards,
Dialogue: 0,0:12:03.94,0:12:08.00,Default,,0,0,0,,此时 两个时间戳的差值可能为负\Nin which case, this difference in timestamps could end up being negative.
Dialogue: 0,0:12:08.00,0:12:09.64,Default,,0,0,0,,如果流逝时间的度量结果是负数\NAnd who knows what your software is going to do
Dialogue: 0,0:12:09.64,0:12:13.44,Default,,0,0,0,,天知道你的软件会出现什么行为\Nif it measures a negative amount of time elapsed.
Dialogue: 0,0:12:13.44,0:12:17.22,Default,,0,0,0,,软件可能会崩溃 也可能会做出任何有趣的错误行为\NThings could crash or things could go badly wrong in all sorts of interesting ways.
Dialogue: 0,0:12:17.22,0:12:19.82,Default,,0,0,0,,两个时间戳的差值也可能会变得大\NAlso, it could be that this number ends up being far too large
Dialogue: 0,0:12:19.82,0:12:23.68,Default,,0,0,0,,如果NTP在程序中间决定向前步进时钟\Nbecause if the NTP client steps the clock forwards,
Dialogue: 0,0:12:23.68,0:12:31.78,Default,,0,0,0,,此时 两个时间戳的差值可能比真正的时间差值大得多\Nin that case, now it's going to have a much greater timestamp than it ought to be.
Dialogue: 0,0:12:31.78,0:12:35.18,Default,,0,0,0,,差值可能比真正的差值大得多\NAnd so, the difference will be greater than it ought to be.
Dialogue: 0,0:12:35.18,0:12:37.86,Default,,0,0,0,,如果你想度量流逝时间\NSo, if you want to do this kind of time measurement,
Dialogue: 0,0:12:37.86,0:12:41.62,Default,,0,0,0,,那就不应该使用currentTimeMillis()等依赖时钟的时间度量机制\Nit is not good to rely on a clock like currentTimeMillis().
Dialogue: 0,0:12:41.62,0:12:44.86,Default,,0,0,0,,你应该使用另一个API\NInstead, what you should do is use a different API.
Dialogue: 0,0:12:44.86,0:12:49.28,Default,,0,0,0,,Java提供了另一个函数：System.nanoTime()\NSo, Java provides this other function here called System.nanoTime().
Dialogue: 0,0:12:49.28,0:12:51.70,Default,,0,0,0,,nanoTime()是针对流逝时间度量任务所设计的函数\NAnd nanoTime() is designed for this kind of thing.
Dialogue: 0,0:12:51.70,0:12:53.54,Default,,0,0,0,,两个函数的表面差异是\NSo, there's the superficial difference,
Dialogue: 0,0:12:53.54,0:12:58.10,Default,,0,0,0,,currentTimeMillis()使用毫秒 nanoTime()使用纳秒\NcurrentTimeMillis() uses milliseconds, nanoTime() uses nanoseconds.
Dialogue: 0,0:12:58.10,0:12:59.54,Default,,0,0,0,,但这只是两个函数的表面差异\NThat's just the superficial difference.
Dialogue: 0,0:12:59.54,0:13:04.20,Default,,0,0,0,,真正的差异是 nanoTime()是所谓的单调时钟\NThe real difference is that nanoTime() is what's called a monotonic clock.
Dialogue: 0,0:13:04.20,0:13:09.48,Default,,0,0,0,,NTP步进时间操作不会影响到单调时钟\NAnd monotonic clock is one in which NTP stepping will not affect it.
Dialogue: 0,0:13:09.48,0:13:12.60,Default,,0,0,0,,也就是说 此类时钟不会突然向前或向后跳转\NSo, this clock is not going to suddenly jump forwards or backwards.
Dialogue: 0,0:13:12.60,0:13:16.66,Default,,0,0,0,,顾名思义 单调时钟的意思是\NAs the name says, monotonic clock means that
Dialogue: 0,0:13:16.66,0:13:19.44,Default,,0,0,0,,此时钟会按接近常数的频率向前移动\Nit moves forward at a more or less constant rate.
Dialogue: 0,0:13:19.44,0:13:24.32,Default,,0,0,0,,时钟倒转仍然会影响到单调时钟 因为时钟倒转会提高时钟的准确性\NSlewing will still affect it, because that improves the accuracy of the clock.
Dialogue: 0,0:13:24.32,0:13:27.44,Default,,0,0,0,,但单调时钟不会出现突然跳转 不会出现时钟不连续的情况\NBut it's not going to suddenly jump with a discontinuity.
Dialogue: 0,0:13:27.44,0:13:30.84,Default,,0,0,0,,使用nanoTime()度量流逝时间\NAnd so, using nanoTime() here to measure the time elapsed
Dialogue: 0,0:13:30.84,0:13:33.20,Default,,0,0,0,,才是正确的方法\Nis the correct way of doing this.
Dialogue: 0,0:13:33.20,0:13:37.52,Default,,0,0,0,,理解单调时钟和日历时钟的区别是非常重要的\NSo, this difference between monotonic and time-of-day clocks is very important.
Dialogue: 0,0:13:37.52,0:13:42.60,Default,,0,0,0,,诸如Java的currentTimeMillis()使用的是日历时钟\NSo, the time-of-day clock is, for example, the Java's currentTimeMillis(),
Dialogue: 0,0:13:42.60,0:13:45.94,Default,,0,0,0,,日历时钟会返回以固定参考点为起始点的流逝时间\Nwhich gives you the time elapsed since a fixed reference point.
Dialogue: 0,0:13:45.94,0:13:50.68,Default,,0,0,0,,UNIX时间戳中 固定参考点就是1970年1月1日 即纪元日\NIn the case of UNIX timestamps, it's this 1st of January 1970, epoch date,
Dialogue: 0,0:13:50.68,0:13:56.08,Default,,0,0,0,,单调时钟会返回任意时刻为起始点的流逝时间\Nwhereas a monotonic clock, the value you get back from it is some arbitrary time
Dialogue: 0,0:13:56.08,0:13:59.22,Default,,0,0,0,,例如 以计算机启动时间为起始点\Nsince, for example, this particular computer booted up.
Dialogue: 0,0:13:59.22,0:14:03.12,Default,,0,0,0,,这意味着此时间戳本身的取值没有任何意义\NSo, this means that the timestamp by itself doesn't really mean anything.
Dialogue: 0,0:14:03.12,0:14:07.48,Default,,0,0,0,,你不能把这个时间戳通过网络发送给另一台计算机进行比较\NYou can't send the timestamp over a network to another computer and compare those,
Dialogue: 0,0:14:07.48,0:14:10.52,Default,,0,0,0,,因为两台计算机的启动时间是不同的\Nbecause two different computers will have booted up at different times,
Dialogue: 0,0:14:10.52,0:14:14.76,Default,,0,0,0,,不同计算机的单调时钟是不可比较的\Nand so, their monotonic timestamps are simply not comparable.
Dialogue: 0,0:14:14.76,0:14:19.98,Default,,0,0,0,,但你可以使用单调时钟度量流逝时间\NBut you can use the monotonic clock for time measurements,
Dialogue: 0,0:14:19.98,0:14:25.50,Default,,0,0,0,,如果你计算单调时钟返回的两个时间戳的差值\Nbecause if you calculate the difference between two timestamps from a monotonic clock,
Dialogue: 0,0:14:25.50,0:14:29.08,Default,,0,0,0,,由于在返回的两个时间戳之间\Nthen the time will have moved forward at a near constant rate
Dialogue: 0,0:14:29.08,0:14:30.36,Default,,0,0,0,,单调时钟会按照接近常数的频率向前移动\Nbetween those two timestamps,
Dialogue: 0,0:14:30.36,0:14:33.16,Default,,0,0,0,,因此这个差值可以代表流逝时间 是有意义的\Nand so that's a meaningful measure of time elapsed,
Dialogue: 0,0:14:33.16,0:14:36.84,Default,,0,0,0,,但如果你计算日历时间的差值\Nwhereas if you do that sort of difference with time-of-day clocks,
Dialogue: 0,0:14:36.84,0:14:40.48,Default,,0,0,0,,则NTP时间跳转会影响到此差值\Nthen you are affected by jumping due to NTP.
Dialogue: 0,0:14:40.48,0:14:44.32,Default,,0,0,0,,闰秒也会影响到此差值 我们在前面也讲过这个问题了\NYou're also affected by leap seconds potentially which we talked about earlier.
Dialogue: 0,0:14:44.32,0:14:48.58,Default,,0,0,0,,因此 使用日历时间戳度量流逝时间可不是个好方法\NSo, these are very bad for measuring elapsed time.
Dialogue: 0,0:14:48.58,0:14:50.10,Default,,0,0,0,,但另一方面\NBut on the other hand,
Dialogue: 0,0:14:50.10,0:14:53.86,Default,,0,0,0,,可以在不同的计算机上比较日历时间戳\Ntime-of-day timestamps you can compare across different computers.
Dialogue: 0,0:14:53.86,0:14:57.24,Default,,0,0,0,,我前面提到过TLS证书的例子\NIf you remember earlier the example I had of the TLS certificate,
Dialogue: 0,0:14:57.24,0:14:59.20,Default,,0,0,0,,TLS证书在特定日期之前是有效的\Nwhich was valid until a certain date,
Dialogue: 0,0:14:59.20,0:15:02.40,Default,,0,0,0,,如果我的计算机想检查此证书是否在有效期内\Nif my computer wants to check whether that certificate is still valid,
Dialogue: 0,0:15:02.40,0:15:04.84,Default,,0,0,0,,我就需要使用准确的当前日期\Nwell, it has to have the accurate current date,
Dialogue: 0,0:15:04.84,0:15:06.54,Default,,0,0,0,,否则 我们就无法对比\Notherwise, it's not going to be able to
Dialogue: 0,0:15:06.54,0:15:11.40,Default,,0,0,0,,证书内的时间戳与计算机当前日历的时间戳\Ncompare the timestamp in the certificate with the current timestamp on that computer.
Dialogue: 0,0:15:11.40,0:15:14.86,Default,,0,0,0,,在这种情况下 我们必须使用日历时钟\NSo, in this case, we do have to use a time-of-day clock,
Dialogue: 0,0:15:14.86,0:15:18.72,Default,,0,0,0,,我们必须跨多台机器同步日历时钟\Nand we do have to synchronize those clocks across multiple machines,
Dialogue: 0,0:15:18.72,0:15:21.38,Default,,0,0,0,,否则 我们就无法获得准确的日历时间戳了\Nbecause otherwise, we won't have accurate timestamps.
Dialogue: 0,0:15:21.38,0:15:22.62,Default,,0,0,0,,正如我前面提到的\NSo, as I said,
Dialogue: 0,0:15:22.62,0:15:26.84,Default,,0,0,0,,大多数程序语言和操作系统提供了时钟API\Nmany programming languages and operating systems provide APIs for this.
Dialogue: 0,0:15:27.32,0:15:30.60,Default,,0,0,0,,例如 Linux下有一个clock_gettime的系统调用\NIn Linux, for example, there's the clock_gettime call.
Dialogue: 0,0:15:30.60,0:15:33.32,Default,,0,0,0,,你可以为此调用传入一个参数\NAnd you can pass an argument to it, say, which tells it
Dialogue: 0,0:15:33.32,0:15:36.00,Default,,0,0,0,,告诉此调用你想要实时时钟 也就是日历时钟\Nwhether you want the real-time clock which is the time-of-day clock
Dialogue: 0,0:15:36.00,0:15:37.70,Default,,0,0,0,,还是想要单调时钟\Nor you want the monotonic clock.
Dialogue: 0,0:15:37.70,0:15:41.12,Default,,0,0,0,,其他语言也会提供类似的API\NBut in other languages, there will be similar APIs for this.
Dialogue: 0,0:15:41.12,0:15:43.40,Default,,0,0,0,,你需要去查看API的文档\NYou will have to check the API documentation.
Dialogue: 0,0:15:43.40,0:15:48.38,Default,,0,0,0,,如果你需要度量时间 一定要记住这两个时钟的区别\NBut it is important to keep in mind this distinction if you do need to measure times.
Dialogue: 0,0:15:48.82,0:15:51.24,Default,,0,0,0,,这两个时钟不光在时间单位上有差异\NIt's not just about the resolution of the clocks,
Dialogue: 0,0:15:51.24,0:15:56.52,Default,,0,0,0,,单调时钟和非单调时钟本身的差异也非常重要\Nbut the distinction between a monotonic and non-monotonic clock is very important.
