[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 1.3_RPC (Remote Procedure Call).mp4
Video File: 1.3_RPC (Remote Procedure Call).mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 56
Active Line: 89
Video Position: 8713

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,,{\pos(639,50)}听译、时间轴：刘巍然（学酥）
Dialogue: 0,0:00:00.00,0:00:04.28,Default,,0,0,0,,我们前面已经学习了网站这一分布式系统实例\NSo, we saw the web as one example of a distributed system
Dialogue: 0,0:00:04.28,0:00:06.56,Default,,0,0,0,,此分布式系统包含客户端和服务端\Nconsisting of a client and a server.
Dialogue: 0,0:00:06.56,0:00:09.00,Default,,0,0,0,,我们来看另一个实例\NLet's look at another practical example,
Dialogue: 0,0:00:09.00,0:00:13.84,Default,,0,0,0,,想象一下 你在使用某个在线商店购买一些东西\Nwhich is imagine you're using some online shop to buy something.
Dialogue: 0,0:00:13.84,0:00:15.96,Default,,0,0,0,,你想要做的是\NAnd so, what you want to do is
Dialogue: 0,0:00:15.96,0:00:18.64,Default,,0,0,0,,当选择好自己要买的商品后\Nyou want to enter your credit card number on this shop
Dialogue: 0,0:00:19.00,0:00:21.12,Default,,0,0,0,,你将在商店里输入自己的信用卡号\Nafter you've chosen the stuff you want to buy.
Dialogue: 0,0:00:21.12,0:00:25.04,Default,,0,0,0,,随后 你结算账单 使用信用卡支付费用\NAnd then, you check out, and you pay with your credit card.
Dialogue: 0,0:00:25.04,0:00:27.74,Default,,0,0,0,,支付费用后 商品就会寄送到你这里\NAnd then, you get the goods shipped to you.
Dialogue: 0,0:00:27.74,0:00:30.58,Default,,0,0,0,,这一过程所发生的事情是\NSo, what happens here is that
Dialogue: 0,0:00:30.58,0:00:36.42,Default,,0,0,0,,实际处理信用卡支付过程的支付服务\Nthe payment service that actually processes this credit card payment
Dialogue: 0,0:00:36.42,0:00:38.74,Default,,0,0,0,,一般都是由另一个不同的公司来提供的\Nis usually provided by a different company
Dialogue: 0,0:00:38.74,0:00:41.44,Default,,0,0,0,,支付服务一般不会由运行在线商店的公司来提供\Nfrom the company that is running the online shop,
Dialogue: 0,0:00:41.44,0:00:46.28,Default,,0,0,0,,因为处理信用卡支付属于非常专业的操作\Nbecause processing credit card payments is a very specialized activity,
Dialogue: 0,0:00:46.28,0:00:47.28,Default,,0,0,0,,更合理的做法是\Nso, it makes sense that
Dialogue: 0,0:00:47.28,0:00:50.14,Default,,0,0,0,,一些公司专门处理信用卡支付过程\Nthey're companies that specialize in just doing credit card payments,
Dialogue: 0,0:00:50.14,0:00:51.22,Default,,0,0,0,,其他公司\Nand another company
Dialogue: 0,0:00:51.22,0:00:54.66,Default,,0,0,0,,专门负责提供在线商店、供货等服务\Nspecializes in actually providing the shop and the goods and so on.
Dialogue: 0,0:00:54.66,0:01:01.72,Default,,0,0,0,,当你在某个在线商店输入你的信用卡号后\NSo, what happens when you enter your credit card number on some online shop is that
Dialogue: 0,0:01:01.72,0:01:05.66,Default,,0,0,0,,在线商店将向支付服务发送一条消息\Nthe online shop will send a message to this payment service,
Dialogue: 0,0:01:05.66,0:01:09.04,Default,,0,0,0,,而支付服务运行在另一个公司所提供的节点上\Nwhich is running on a different node provided by a different company.
Dialogue: 0,0:01:09.04,0:01:13.10,Default,,0,0,0,,这条消息将包含你的信用卡号\NAnd this message will contain the details of your card number,
Dialogue: 0,0:01:13.10,0:01:15.40,Default,,0,0,0,,需要此信用卡支付的金额\Nand how much they want to charge to that card,
Dialogue: 0,0:01:15.40,0:01:18.50,Default,,0,0,0,,以及很多其他的信息 例如你的账单地址等等\Nand various other information, maybe your billing address, and so on.
Dialogue: 0,0:01:18.50,0:01:20.72,Default,,0,0,0,,这些信息将会被发送给支付服务\NThis will get sent to the payment service.
Dialogue: 0,0:01:20.72,0:01:23.54,Default,,0,0,0,,支付服务将完成一系列复杂的处理过程\NThe payment service then does a whole lot of complicated stuff.
Dialogue: 0,0:01:23.54,0:01:28.12,Default,,0,0,0,,它们与Visa或MasterCard等信用卡支付网络通信\NThey talk to the card payment network such as Visa or MasterCard.
Dialogue: 0,0:01:28.12,0:01:31.42,Default,,0,0,0,,信用卡支付网络将与银行通信 确认这张信用卡确实是此银行分发的\NThe card payment network then talks to the bank that issued your card.
Dialogue: 0,0:01:31.42,0:01:33.96,Default,,0,0,0,,银行需要确定你的账户上的确有钱\NThey make sure that you actually have money in your account,
Dialogue: 0,0:01:33.96,0:01:37.64,Default,,0,0,0,,随后 银行要保证支付可以顺利完成\Nand then, they make sure that the payment can be taken.
Dialogue: 0,0:01:37.64,0:01:40.76,Default,,0,0,0,,如果支付成功 它们将按照相反的顺序再返回支付结果\NAnd if it's successful, then they go through all of this in reverse.
Dialogue: 0,0:01:40.76,0:01:44.02,Default,,0,0,0,,这中间可能会涉及额外的检查操作\NAnd maybe they do extra checks to
Dialogue: 0,0:01:44.30,0:01:48.70,Default,,0,0,0,,例如你需要输入口令 或者服务需要向你发送验证消息等等\Nlike make you enter a password, or send you a test message, or whatever it might be.
Dialogue: 0,0:01:48.70,0:01:51.22,Default,,0,0,0,,所有这些过程结束后\NAnd eventually, hopefully,
Dialogue: 0,0:01:51.22,0:01:54.48,Default,,0,0,0,,支付服务向在线商店发送回一条消息\Nthe payment service then sends a message back to the online shop
Dialogue: 0,0:01:54.48,0:01:57.22,Default,,0,0,0,,表示支付是否成功完成\Nindicating whether the payment was successful or not.
Dialogue: 0,0:01:57.22,0:02:01.74,Default,,0,0,0,,这是一个非常具体的分布式系统实例\NAnd so, this is very concrete example of a distributed system
Dialogue: 0,0:02:01.74,0:02:04.70,Default,,0,0,0,,在线商店每天都会执行上述流程\Nthat is really used like this every single day.
Dialogue: 0,0:02:04.70,0:02:08.30,Default,,0,0,0,,我们来简单看看具体代码长什么样子\NNow, let's have a look a bit at what the code might look like.
Dialogue: 0,0:02:08.30,0:02:13.08,Default,,0,0,0,,想象你自己是在线商店的程序员\NSo, imagine you are one of the programmers working on the side of the online shop.
Dialogue: 0,0:02:13.08,0:02:16.60,Default,,0,0,0,,你正在开发运行在线商店的软件\NSo, you're developing the software that runs the online shop,
Dialogue: 0,0:02:16.60,0:02:20.74,Default,,0,0,0,,你正在撰写处理信用卡支付的代码\Nand you're writing the code that is supposed to handle the credit card payments
Dialogue: 0,0:02:20.74,0:02:22.78,Default,,0,0,0,,让在线商店使用支付服务完成支付\Nand talk to the payment service.
Dialogue: 0,0:02:22.78,0:02:25.52,Default,,0,0,0,,你写出的代码差不多应该是这个样子\NAnd so, the code you write might look something like this here.
Dialogue: 0,0:02:25.52,0:02:29.96,Default,,0,0,0,,假设你的基础代码里包含一个card（信用卡）对象\NSo, let's assume that there's a card object in your code base.
Dialogue: 0,0:02:29.96,0:02:32.32,Default,,0,0,0,,你可以创建一个新的card对象实例\NAnd you can create a new instance of this card object.
Dialogue: 0,0:02:32.32,0:02:34.48,Default,,0,0,0,,你可以向这个对象传入\NAnd you can give it
Dialogue: 0,0:02:34.48,0:02:39.30,Default,,0,0,0,,信用卡号、有效期、以及信用卡背后的3个数字\Nthe credit card number, and the expiry date, and the 3 digits on the back.
Dialogue: 0,0:02:39.30,0:02:43.26,Default,,0,0,0,,你可以把所有这些信息都打包到card对象中\NAnd you can package all of this up as a card object.
Dialogue: 0,0:02:43.26,0:02:45.00,Default,,0,0,0,,随后 你将调用下面这个函数\NAnd then, you call this function.
Dialogue: 0,0:02:45.00,0:02:48.34,Default,,0,0,0,,你有某个叫paymentService（支付服务）的对象\NSo, you have some object that has this paymentService.
Dialogue: 0,0:02:48.34,0:02:51.98,Default,,0,0,0,,你调用此对象的processPayment（处理支付）方法\NAnd you call the processPayment method on this function.
Dialogue: 0,0:02:51.98,0:02:54.52,Default,,0,0,0,,你在方法中输入待付费的信用卡\NAnd you give it the card that you want to charge.
Dialogue: 0,0:02:54.52,0:02:57.58,Default,,0,0,0,,并输入支付的金额\NAnd you give it the amount that you want to charge it,
Dialogue: 0,0:02:57.58,0:02:59.52,Default,,0,0,0,,以及付款所用的货币类型\Nand the currency in which you want to charge it.
Dialogue: 0,0:02:59.52,0:03:04.30,Default,,0,0,0,,随后 你需要根据支付是否成功这一信息执行后续的操作\NAnd then, depending on whether this is successful or not, you then fulfill the order.
Dialogue: 0,0:03:04.30,0:03:07.60,Default,,0,0,0,,了解整个过程具体发生了什么是非常有趣的一件事\NSo, this is quite interesting what is happening here,
Dialogue: 0,0:03:07.60,0:03:09.52,Default,,0,0,0,,仔细思考一下\Nbecause if you think about it,
Dialogue: 0,0:03:09.52,0:03:13.66,Default,,0,0,0,,支付服务运行在另一个公司提供的节点上\Nthe payment service is running on a different node, run by a different company.
Dialogue: 0,0:03:13.66,0:03:16.50,Default,,0,0,0,,这部分代码不属于在线商店\NIt's not part of the code base of the online shop.
Dialogue: 0,0:03:16.50,0:03:21.12,Default,,0,0,0,,具体来说 当你调用这个processPayment函数时\NSo, what is happening here is when you call this processPayment function,
Dialogue: 0,0:03:21.12,0:03:24.84,Default,,0,0,0,,你的程序并未包含此函数的实现\Nthe implementation of that function is not within your program.
Dialogue: 0,0:03:24.84,0:03:27.50,Default,,0,0,0,,具体实现在另一个节点上\NThe implementation is somewhere on another node
Dialogue: 0,0:03:27.50,0:03:29.66,Default,,0,0,0,,你和这个节点通过网络连接\Nat the other end of an internet connection.
Dialogue: 0,0:03:29.66,0:03:31.38,Default,,0,0,0,,这里实际发生的情况是\NAnd what is actually happening here is
Dialogue: 0,0:03:31.38,0:03:34.44,Default,,0,0,0,,看起来这像是在做函数调用或方法调用\Nwhat looks like a function call or a method call.
Dialogue: 0,0:03:34.44,0:03:39.44,Default,,0,0,0,,但在背后 调用过程会被翻译成一些网络通信消息\NIt is actually underneath being translated into some kind of network communication.
Dialogue: 0,0:03:39.44,0:03:42.36,Default,,0,0,0,,这种调用过程称为远程过程调用\NAnd this is called a Remote Procedure Call.
Dialogue: 0,0:03:42.36,0:03:44.88,Default,,0,0,0,,远程函数调用这个名字可能更合适\NMaybe a Remote Function Call would be a better name,
Dialogue: 0,0:03:44.88,0:03:47.84,Default,,0,0,0,,但大家一般都把这个过程叫远程过程调用\Nbut Remote Procedure Call is what this thing is typically called.
Dialogue: 0,0:03:47.84,0:03:49.98,Default,,0,0,0,,因此 我们遵从行业惯例 仍然使用这个名词\NAnd so, we're just going to stick with that name.
Dialogue: 0,0:03:50.62,0:03:53.68,Default,,0,0,0,,Java把相同的操作称为远程方法调用\NJava calls the same thing Remote Method Invocation.
Dialogue: 0,0:03:53.68,0:03:57.30,Default,,0,0,0,,这本质上给相同思想起的另一个名字\NAgain, just a different word for essentially the same idea.
Dialogue: 0,0:03:57.30,0:04:02.60,Default,,0,0,0,,我们来看看远程过程调用 即RPC是如何工作的\NAnd so, let's have a look at how RPC, a Remote Procedure Call works.
Dialogue: 0,0:04:02.60,0:04:07.22,Default,,0,0,0,,RPC一般由RPC框架来实现的\NSo, RPC is typically implemented with something called an RPC framework,
Dialogue: 0,0:04:07.22,0:04:09.60,Default,,0,0,0,,有时我们会把RPC框架称为中间件\Nor it's called middleware sometimes.
Dialogue: 0,0:04:09.60,0:04:13.42,Default,,0,0,0,,RPC框架是一个软件 它实现的功能就是\NThis is a piece of software that performs the translation between
Dialogue: 0,0:04:13.42,0:04:15.84,Default,,0,0,0,,把你编程语言中的函数调用\Nthe function call in your programming language
Dialogue: 0,0:04:15.84,0:04:18.34,Default,,0,0,0,,翻译为通过网络发送的消息\Nand this message passing over the network.
Dialogue: 0,0:04:18.34,0:04:24.96,Default,,0,0,0,,因此 当在线商店的代码调用这个processPayment函数时\NAnd so, when the code of the online shop calls this processPayment function,
Dialogue: 0,0:04:24.96,0:04:27.72,Default,,0,0,0,,在线商店无法在另一个节点上直接调用这个函数\Nit can't directly call the function on a different node,
Dialogue: 0,0:04:27.72,0:04:30.62,Default,,0,0,0,,因为你的编程语言一般无法支持这种函数调用方法\Nbecause your programming language doesn't support that normally.
Dialogue: 0,0:04:30.62,0:04:34.74,Default,,0,0,0,,取代而之的是 RPC框架提供一个桩函数\NInstead, the RPC framework provides what is called a stub.
Dialogue: 0,0:04:34.74,0:04:38.18,Default,,0,0,0,,桩函数拥有相同的类型签名\NSo, the stub function, it has the same type signature,
Dialogue: 0,0:04:38.18,0:04:42.72,Default,,0,0,0,,它看起来和你希望调用的远程节点函数完全相同\Nand it looks the same as the function on the remote node that you want to call.
Dialogue: 0,0:04:42.72,0:04:45.56,Default,,0,0,0,,你希望调用这个processPayment函数\NSo, you want to call this processPayment function.
Dialogue: 0,0:04:45.56,0:04:49.40,Default,,0,0,0,,实际上 这个桩函数不会真的处理支付过程\NAnd what we make is this stub function that doesn't actually process the payment.
Dialogue: 0,0:04:49.40,0:04:50.42,Default,,0,0,0,,那它做了什么呢？\NBut what it does?
Dialogue: 0,0:04:50.42,0:04:54.66,Default,,0,0,0,,它向服务发送一条消息 服务会处理支付过程\NIt sends a message to the service, which then does process the payment.
Dialogue: 0,0:04:54.66,0:04:58.10,Default,,0,0,0,,在线商店将调用这个桩函数\NSo, the online shop calls into this stub function here.
Dialogue: 0,0:04:58.10,0:05:03.18,Default,,0,0,0,,RPC客户端需要读取传入桩函数的参数\NAnd the RPC client needs to take the arguments that were passed to that function,
Dialogue: 0,0:05:03.18,0:05:06.32,Default,,0,0,0,,并将这些参数翻译为可以通过网络发送的消息\Nand translate them into a message that can be sent over the network.
Dialogue: 0,0:05:06.32,0:05:07.80,Default,,0,0,0,,这个翻译过程\NAnd this translation process
Dialogue: 0,0:05:07.80,0:05:10.76,Default,,0,0,0,,也就是将编程语言中的参数翻译为网络通信消息的过程\Nfrom arguments in your programming language to message over the network
Dialogue: 0,0:05:10.76,0:05:12.48,Default,,0,0,0,,叫做编组\Nis called marshalling.
Dialogue: 0,0:05:12.48,0:05:17.88,Default,,0,0,0,,因此 编组 我也称之为编码 以函数调用参数为输入\NAnd so, marshalling, or I call it encoding as well, takes the function arguments,
Dialogue: 0,0:05:17.88,0:05:20.66,Default,,0,0,0,,将参数编码成可以通过网络发送的消息\Nand encodes it in some way that can be sent over the network.
Dialogue: 0,0:05:20.66,0:05:24.22,Default,,0,0,0,,举例来说 可以把参数编码为json 这个例子里使用的就是json\NSo, for example, it might use json. In this example, it uses json.
Dialogue: 0,0:05:24.22,0:05:25.84,Default,,0,0,0,,也可以把参数编码为某种二进制格式\NIt could use some kind of binary format.
Dialogue: 0,0:05:25.84,0:05:27.58,Default,,0,0,0,,大家先不用考虑具体应该使用什么格式\NThe format, it doesn't really matter.
Dialogue: 0,0:05:27.58,0:05:30.20,Default,,0,0,0,,本质上 编组将参数编码为字节串\NBut it becomes then essentially just a sequence of bytes
Dialogue: 0,0:05:30.20,0:05:32.98,Default,,0,0,0,,我们可以把字节串放到在消息中 通过网络把参数发送出去\Nthat we can pack into a message, send over the network.
Dialogue: 0,0:05:32.98,0:05:37.70,Default,,0,0,0,,在接收方一侧 RPC服务器将收到这条消息\NAnd then, on the recipient side, the RPC server is going to receive this message.
Dialogue: 0,0:05:37.70,0:05:42.58,Default,,0,0,0,,并把收到的消息翻译回服务端函数调用所需的参数\NAnd it's going to translate it back into a function call on the server side.
Dialogue: 0,0:05:42.58,0:05:43.80,Default,,0,0,0,,服务端侧\NAnd so, here now,
Dialogue: 0,0:05:43.80,0:05:47.70,Default,,0,0,0,,包含了processPayment函数的具体实现\Nthis is where the actual implementation of the processPayment function lives.
Dialogue: 0,0:05:47.70,0:05:52.64,Default,,0,0,0,,RPC服务端侧会调用这里实现的函数\NAnd so, here on the RPC server side now, this function is going to get called.
Dialogue: 0,0:05:52.64,0:05:56.82,Default,,0,0,0,,此函数将完成必要的操作 处理支付流程\NAnd it's going to do whatever is necessary in order to make this payment happen.
Dialogue: 0,0:05:56.82,0:06:00.26,Default,,0,0,0,,这可能涉及到与信用卡网络和银行通信\NAnd that will probably involve talking to the card network, and the bank,
Dialogue: 0,0:06:00.26,0:06:04.46,Default,,0,0,0,,更新数据库中的一些数据 完成一系列其他的操作\Nand updating some databases, and doing a whole bunch of extra stuff.
Dialogue: 0,0:06:04.46,0:06:06.74,Default,,0,0,0,,最终 这个函数会返回处理结果\NAnd eventually, this function will return.
Dialogue: 0,0:06:06.74,0:06:10.40,Default,,0,0,0,,我们希望这个函数可以告诉我们信用卡支付结果是成功还是失败了\NAnd hopefully, it will tell us whether the card payment was successful or not.
Dialogue: 0,0:06:10.40,0:06:13.74,Default,,0,0,0,,我们也需要编组此函数的返回值\NSo, the return value of this function again needs to be marshaled.
Dialogue: 0,0:06:13.74,0:06:15.84,Default,,0,0,0,,我们要按相反的方向返回消息\NWe do exactly the same in reverse.
Dialogue: 0,0:06:15.84,0:06:20.46,Default,,0,0,0,,RPC服务端编组函数的返回值\NSo, the RPC server marshals the return value of the function,
Dialogue: 0,0:06:20.46,0:06:23.36,Default,,0,0,0,,把结果消息m_2通过网络再发送回来\Nsends it back as a message m_2 of the network.
Dialogue: 0,0:06:23.36,0:06:25.36,Default,,0,0,0,,RPC客户端反编组消息\NThe RPC client unmarshals it,
Dialogue: 0,0:06:25.36,0:06:29.98,Default,,0,0,0,,将消息转换回编程语言所用的数据类型\Nand turns it back into the data types of the programming language that you're using.
Dialogue: 0,0:06:29.98,0:06:32.12,Default,,0,0,0,,最终 函数成功返回结果\NAnd then, eventually, the function returns.
Dialogue: 0,0:06:32.12,0:06:34.26,Default,,0,0,0,,因此 我们实现的效果是\NAnd so, what we've done now is
Dialogue: 0,0:06:34.26,0:06:38.74,Default,,0,0,0,,假装我们是在本地调用的函数\Nto kind of pretend what we're doing is calling a function locally,
Dialogue: 0,0:06:38.74,0:06:42.16,Default,,0,0,0,,但实际上 背后发生的事情是\Nbut actually, what's happening underneath is
Dialogue: 0,0:06:42.16,0:06:46.66,Default,,0,0,0,,参数以消息的形式发送给了另一个服务\Nthis communication via messages to another service.
Dialogue: 0,0:06:46.66,0:06:51.20,Default,,0,0,0,,我们希望实现的理想效果是\NSo, the ideal that we kind of want here is that
Dialogue: 0,0:06:51.20,0:06:58.80,Default,,0,0,0,,向其他服务执行函数调用看起来就像本地调用一样\Nthe function call to a different service looks just like a local function call,
Dialogue: 0,0:06:58.80,0:07:01.58,Default,,0,0,0,,因为我们知道如何用我们使用的编程语言调用这个函数\Nbecause we know what functions in our programming language look like,
Dialogue: 0,0:07:01.58,0:07:07.96,Default,,0,0,0,,我们希望远程RPC有相同的函数调用方法\Nwe would quite like the remote RPC to look just like that.
Dialogue: 0,0:07:07.96,0:07:10.66,Default,,0,0,0,,这一原则叫位置透明性\NAnd this principle is called location transparency.
Dialogue: 0,0:07:10.66,0:07:14.80,Default,,0,0,0,,也就是说 所调用资源的位置\NSo, the location of where your resource is located
Dialogue: 0,0:07:14.80,0:07:18.66,Default,,0,0,0,,也就是你调用processPayment时所用的对象\Nthat is, whether the objects that you're calling your processPayment on
Dialogue: 0,0:07:18.66,0:07:22.32,Default,,0,0,0,,无论是在你的本地地址空间上处理这个对象\Nwhether that's an object in your own process in your local address space
Dialogue: 0,0:07:22.32,0:07:25.62,Default,,0,0,0,,还是在互联网连接的另一端处理这个对象\Nor whether it's somewhere on the other end of an internet connection,
Dialogue: 0,0:07:25.62,0:07:27.12,Default,,0,0,0,,我们希望处理位置是透明的\Nwe want that to be transparent.
Dialogue: 0,0:07:27.12,0:07:30.16,Default,,0,0,0,,我们不想让调用方觉得不同位置的调用方法不一样\NWe want not to be able to tell the difference between the two.
Dialogue: 0,0:07:30.16,0:07:33.82,Default,,0,0,0,,然而 现实总不会那么简单\NHowever, actually reality doesn't look that simple,
Dialogue: 0,0:07:33.82,0:07:39.94,Default,,0,0,0,,因为我在最开始已经提到过 麻烦在于网络可能会出现故障\NBecause, as I said in the beginning, the trouble with networks is that they can fail.
Dialogue: 0,0:07:39.94,0:07:44.90,Default,,0,0,0,,有可能发生的是 你向网络发送一条消息 但消息没有到达目的地\NSo, it can be that you send a message over the network, and the message does not arrive.
Dialogue: 0,0:07:45.42,0:07:46.76,Default,,0,0,0,,你当然可以重新发送此消息\NYou could send it again, of course,
Dialogue: 0,0:07:46.76,0:07:49.44,Default,,0,0,0,,但如果是这样 我们要多次用这个信用卡支付相同的账单吗？\Nbut then, are you going to charge the credit card multiple times?
Dialogue: 0,0:07:49.44,0:07:52.34,Default,,0,0,0,,当我们想重复发送消息时 处理时要特别小心\NWe have to be quite careful if we're going to send messages again.
Dialogue: 0,0:07:52.34,0:07:55.90,Default,,0,0,0,,消息可能会丢失 那我们该如何实现重试操作呢？\NSo, messages might be lost. What do we do about retry?
Dialogue: 0,0:07:56.64,0:07:58.16,Default,,0,0,0,,消息接收也会出现延迟问题\NMessages also might be delayed.
Dialogue: 0,0:07:58.16,0:08:00.66,Default,,0,0,0,,有可能发生的是 消息确实成功发送到了对方手中\NSo, it might be that the message did actually get through,
Dialogue: 0,0:08:00.66,0:08:03.64,Default,,0,0,0,,但可能因为某些原因使得网络出现了抖动\Nbut for some reason, there was some networking hiccups somewhere
Dialogue: 0,0:08:03.64,0:08:05.54,Default,,0,0,0,,这使得消息接收出现了延时\Nthat caused the message to be delayed by a while.
Dialogue: 0,0:08:05.54,0:08:07.00,Default,,0,0,0,,这种情况也有可能发生\NThat could happen as well.
Dialogue: 0,0:08:07.00,0:08:10.80,Default,,0,0,0,,还有可能发生的事情是 处理这个函数的服务\NIt could also happen that the service that is processing this function
Dialogue: 0,0:08:10.80,0:08:14.26,Default,,0,0,0,,在函数处理的过程中崩溃了\Ncrashed in the middle of executing our function,
Dialogue: 0,0:08:14.26,0:08:17.50,Default,,0,0,0,,这时 服务就不能返回响应消息了\Nin that case, it won't be able to send us back a response.
Dialogue: 0,0:08:17.50,0:08:20.78,Default,,0,0,0,,但处理函数可能部分处理了我们的请求\NBut it might have partially processed our request.
Dialogue: 0,0:08:20.78,0:08:24.36,Default,,0,0,0,,我猜这里我们可以使用事务来解决这个问题\NI guess we can use transactions here, and said, yes, OK.
Dialogue: 0,0:08:24.36,0:08:26.90,Default,,0,0,0,,可以看到 远程调用会面临很多的问题\NYou can see there are a lot of open questions here.
Dialogue: 0,0:08:26.90,0:08:28.68,Default,,0,0,0,,根本上看\NAnd fundamentally,
Dialogue: 0,0:08:28.68,0:08:33.98,Default,,0,0,0,,向远程资源执行函数调用\Nit seems like actually making a function call to a remote resource
Dialogue: 0,0:08:33.98,0:08:37.56,Default,,0,0,0,,与调用本地函数所面临的情况是完全不同的\Nis something totally different from calling a local function.
Dialogue: 0,0:08:37.56,0:08:38.98,Default,,0,0,0,,这完全是两种不同的情况\NThey're simply two different things.
Dialogue: 0,0:08:38.98,0:08:40.56,Default,,0,0,0,,我们可以让这两种调用方法看起来相似\NWe can make them look somewhat similar,
Dialogue: 0,0:08:40.56,0:08:43.24,Default,,0,0,0,,我们可以给函数设置相似的函数类型签名\Nwe can give the functions a similar type signature,
Dialogue: 0,0:08:43.24,0:08:47.22,Default,,0,0,0,,但调用远程函数会遇到上述一系列可能发生的错误情况\Nbut calling a remote function has all of these error cases
Dialogue: 0,0:08:47.22,0:08:50.14,Default,,0,0,0,,而本地调用时不会发生类似的错误\Nthat simply don't arise in local execution.
Dialogue: 0,0:08:50.14,0:08:56.16,Default,,0,0,0,,这些问题未能阻止人们花费海量的时间尝试构建RPC框架\NBut that hasn't stopped people from trying to build RPC frameworks over a long time
Dialogue: 0,0:08:56.16,0:08:59.98,Default,,0,0,0,,即使确实在调用另一个节点上的服务\Nthat try to look like you're calling a local function
Dialogue: 0,0:08:59.98,0:09:02.72,Default,,0,0,0,,人们也在尝试让远程调用看起来和本地调用很相似\Neven though you're calling something on another node.
Dialogue: 0,0:09:02.72,0:09:07.62,Default,,0,0,0,,回到二十世纪八十年代 那时候人们就创造出了RPC这个术语\NSo, it started right back in the 1980s when the term RPC was first coined,
Dialogue: 0,0:09:07.62,0:09:09.86,Default,,0,0,0,,一些微型系统开始使用RPC\Nand like some microsystems had this thing.
Dialogue: 0,0:09:09.86,0:09:12.90,Default,,0,0,0,,用于构建NFS 即网络文件系统\NAnd it was used to build NFS, the network file system
Dialogue: 0,0:09:12.90,0:09:15.28,Default,,0,0,0,,我们将在本课程将会讲解相关技术\Nof which we'll see more later in the course.
Dialogue: 0,0:09:16.20,0:09:18.60,Default,,0,0,0,,二十世纪九十年代出现了一个非常热的领域\NAnd then, in the 1990s, this was a very hot topic.
Dialogue: 0,0:09:18.60,0:09:20.88,Default,,0,0,0,,人们开始讨论面向对象中间件\NPeople then talked about object-oriented middleware.
Dialogue: 0,0:09:20.88,0:09:24.12,Default,,0,0,0,,那时候出现的CORBA（公共对象请求代理体系结构）势头火热\NAnd there was this thing called CORBA, which was like really hot.
Dialogue: 0,0:09:24.12,0:09:26.26,Default,,0,0,0,,不过 现在已经没有人用CORBA了\NNowadays, nobody uses it anymore.
Dialogue: 0,0:09:27.04,0:09:29.00,Default,,0,0,0,,随后 出现了一系列竞争技术\NThen, there were a whole bunch of competing technologies,
Dialogue: 0,0:09:29.00,0:09:33.40,Default,,0,0,0,,例如 Java的远程方法调用和CORBA比较类似\Nlike Java's Remote Method Invocation is kind of a similar type to CORBA.
Dialogue: 0,0:09:33.40,0:09:35.80,Default,,0,0,0,,我们不会介绍这些技术的细节\NWe won't go into the details of all of these.
Dialogue: 0,0:09:36.04,0:09:39.80,Default,,0,0,0,,我只是在这里提一下这些技术的名字 因为大家后续可能会遇到这些名字\NI'm just mentioning the names here, because you might encounter them in your careers.
Dialogue: 0,0:09:39.80,0:09:43.02,Default,,0,0,0,,因此 至少可以提前接触一下这些技术的名字\NAnd so, it's good to at least have seen them before.
Dialogue: 0,0:09:43.82,0:09:49.18,Default,,0,0,0,,2015年 也就是最近 谷歌公布了另一个RPC框架\NAnd just as recently as 2015, Google brought out another RPC framework.
Dialogue: 0,0:09:49.18,0:09:51.76,Default,,0,0,0,,称为gRPC 意思是谷歌的RPC\NIt's called gRPC，for Google's RPC.
Dialogue: 0,0:09:52.58,0:09:57.32,Default,,0,0,0,,这是个不错的RPC 如果你想用RPC 可以试试这个框架\NIt's fine. If you want to do RPC, why not? You can use it.
Dialogue: 0,0:09:57.32,0:09:59.64,Default,,0,0,0,,你也可以用其他的框架 也没什么问题\NYou can use something else. It doesn't really matter.
Dialogue: 0,0:10:00.42,0:10:05.04,Default,,0,0,0,,现在非常常见的是所谓的REST\NWhat is very common nowadays is actually something called REST.
Dialogue: 0,0:10:05.38,0:10:10.44,Default,,0,0,0,,意思是表述性状态转移 这个名字有点拗口\NThis stands for REpresentational State Transfer, a bit of a mouthful.
Dialogue: 0,0:10:10.44,0:10:15.84,Default,,0,0,0,,REST实际上是如何使用HTTP的一系列法则\NBut it's really a set of principles for how to use HTTP.
Dialogue: 0,0:10:15.84,0:10:21.64,Default,,0,0,0,,REST的狂热爱好者们不喜欢把REST看成一种RPC\NPeople who are keen enthusiasts of REST don't like to think of REST as RPC.
Dialogue: 0,0:10:21.64,0:10:25.20,Default,,0,0,0,,他们喜欢把REST和RPC看成两种哲学\NThey like to think of REST and RPC as two different philosophies.
Dialogue: 0,0:10:25.20,0:10:27.92,Default,,0,0,0,,但本质上 它们是一回事\NBut essentially, they're the same kind of thing.
Dialogue: 0,0:10:27.92,0:10:30.16,Default,,0,0,0,,本质上 它们实现的功能仍然是\NSo, essentially, they're still about
Dialogue: 0,0:10:30.16,0:10:33.90,Default,,0,0,0,,调用代码 以发起网络请求的方式\Ninvoking code and causing something to happen in a remote service
Dialogue: 0,0:10:33.90,0:10:36.36,Default,,0,0,0,,让远程服务完成一些处理工作\Nby making some network requests to it,
Dialogue: 0,0:10:36.36,0:10:38.18,Default,,0,0,0,,在你的编程语言下 以某种合理的方式\Nand packaging the whole thing up
Dialogue: 0,0:10:38.18,0:10:41.36,Default,,0,0,0,,把所有的信息打包在一起\Nin some reasonably nice way in your programming language.
Dialogue: 0,0:10:41.36,0:10:48.84,Default,,0,0,0,,用RESTful方法构建RPC的方式非常流行的原因是\NSo, one reason why this RESTful approach of building RPC became so popular
Dialogue: 0,0:10:48.84,0:10:52.62,Default,,0,0,0,,网页浏览器支持构建HTTP请求\Nwas that web browsers support making HTTP requests.
Dialogue: 0,0:10:52.62,0:10:56.20,Default,,0,0,0,,因此 你可以利用到一些运行在网页浏览器的JavaScript代码\NSo, you can have some JavaScript code running within a web browser.
Dialogue: 0,0:10:56.20,0:11:00.04,Default,,0,0,0,,这些代码可以构建发送给服务器的HTTP请求\NAnd this code can make HTTP requests to a server.
Dialogue: 0,0:11:00.04,0:11:04.00,Default,,0,0,0,,这些代码可以构造出任何想在请求中发送的数据 把数据发出去\NAnd it can construct whatever data it wants to send in that request, send it out,
Dialogue: 0,0:11:04.00,0:11:06.64,Default,,0,0,0,,也可以接收到从服务端发送回的响应\Nand it can receive the response back from the server.
Dialogue: 0,0:11:06.64,0:11:09.18,Default,,0,0,0,,有时也把这个技术称为Ajax\NThis technique is sometimes also called Ajax.
Dialogue: 0,0:11:09.18,0:11:11.02,Default,,0,0,0,,实现上述过程的代码看起来像这个样子\NAnd it looks something like this.
Dialogue: 0,0:11:11.02,0:11:17.26,Default,,0,0,0,,如果我想用JavaScript实现信用卡支付的例子\NSo, if I want to implement this credit card payment example in JavaScript,
Dialogue: 0,0:11:17.26,0:11:19.90,Default,,0,0,0,,我首先要创建这个args对象\NI might first of all create this object args
Dialogue: 0,0:11:19.90,0:11:22.96,Default,,0,0,0,,对象中包含了RPC函数调用所需的参数\Ncontaining the arguments to the function call for the RPC.
Dialogue: 0,0:11:22.96,0:11:25.30,Default,,0,0,0,,这个对象将包含金额、货币类型\NSo, that will contain the amount, and the currency
Dialogue: 0,0:11:25.30,0:11:27.94,Default,,0,0,0,,信用卡号、支付地址等信息\Nand the card number, and the billing address, and so on.
Dialogue: 0,0:11:27.94,0:11:30.00,Default,,0,0,0,,随后 我要构建request对象\NAnd then, I construct this request object,
Dialogue: 0,0:11:30.00,0:11:32.48,Default,,0,0,0,,这个对象明确了我想使用哪种HTTP方法\Nwhich says which HTTP method I want to use.
Dialogue: 0,0:11:32.48,0:11:35.64,Default,,0,0,0,,POST方法一般用于提交一个表格\NSo, POST is the method that's used for submitting forms usually
Dialogue: 0,0:11:35.64,0:11:38.34,Default,,0,0,0,,当你想修改服务器的某些状态时 一般会使用POST方法\Nwhen you're changing some state on the server.
Dialogue: 0,0:11:39.10,0:11:40.78,Default,,0,0,0,,得到这些参数后\NI'm now going to take the arguments,
Dialogue: 0,0:11:40.78,0:11:45.62,Default,,0,0,0,,我将使用json.stringify函数将它们转换为json字符串\Nand turn them into a json string using the json.stringify function.
Dialogue: 0,0:11:45.62,0:11:49.96,Default,,0,0,0,,我可以告诉服务端 我提交的是json格式的数据\NAnd I can tell the server that json is the type of data that I'm providing.
Dialogue: 0,0:11:49.96,0:11:52.60,Default,,0,0,0,,我本质上是在告诉服务端提交的文件格式\NSo, I'm providing the file type essentially.
Dialogue: 0,0:11:52.60,0:11:54.82,Default,,0,0,0,,随后 我调用这个URL\NAnd then, I can call this URL,
Dialogue: 0,0:11:54.82,0:12:00.00,Default,,0,0,0,,意思是向example.com/payments这个URL发送一个HTTP请求\Nwhich means actually sending an HTTP request to this URL example.com/payments
Dialogue: 0,0:12:00.00,0:12:02.70,Default,,0,0,0,,请求中包含了上述所有参数\Nwith all of the details specified above.
Dialogue: 0,0:12:02.70,0:12:07.22,Default,,0,0,0,,接下来 我得到了下面两个处理程序\NAnd then, we have these two handlers down here.
Dialogue: 0,0:12:07.22,0:12:11.04,Default,,0,0,0,,then分支包含了一个回调函数\NSo, the then case has a function call back here,
Dialogue: 0,0:12:11.04,0:12:18.42,Default,,0,0,0,,如果此网络请求得到了一个表示成功的响应 就会调用此回调函数\Nwhich gets called if that network request resulted as in a successful response.
Dialogue: 0,0:12:18.42,0:12:21.36,Default,,0,0,0,,如果我们从服务端得到了一个返回的响应\NSo, if we got a response back from the server,
Dialogue: 0,0:12:21.36,0:12:24.74,Default,,0,0,0,,那么这里的response变量就表示具体的响应是什么\Nthen this variable response here becomes that response.
Dialogue: 0,0:12:24.74,0:12:26.88,Default,,0,0,0,,此时 我们执行这里的代码\NAnd then, we execute this code here.
Dialogue: 0,0:12:26.88,0:12:29.76,Default,,0,0,0,,我们现在可以查看从服务端得到的响应\NSo, we can now look at the response that we got from the server
Dialogue: 0,0:12:29.76,0:12:35.42,Default,,0,0,0,,查看服务端回复的状态码 判断请求是成功了还是失败了\Nand see whether the status code that it replies indicates success or not.
Dialogue: 0,0:12:35.42,0:12:39.92,Default,,0,0,0,,如果状态码表示请求成功 这意味着响应大概率也是json格式的\NSo, if it indicates success, that means the response is probably json again.
Dialogue: 0,0:12:39.92,0:12:46.10,Default,,0,0,0,,我们可以调用这个json函数 将响应反编组为JavaScript对象\NSo, we can unmarshal that back into objects in JavaScript by calling this json function,
Dialogue: 0,0:12:46.10,0:12:47.40,Default,,0,0,0,,随后 调用success函数\Nand then, call the success function
Dialogue: 0,0:12:47.40,0:12:51.70,Default,,0,0,0,,表示我们从服务端得到了一个表示调用成功的状态\Nto indicate that we got a successful status back from the server.
Dialogue: 0,0:12:51.70,0:12:54.44,Default,,0,0,0,,否则 如果状态码的意思是未能成功\NOtherwise, if the status code was not success,
Dialogue: 0,0:12:54.44,0:12:57.56,Default,,0,0,0,,我们就以状态码为输入来调用failure函数\Nthen we could call a failure function with the status code, for example.
Dialogue: 0,0:12:57.56,0:13:01.36,Default,,0,0,0,,当然了 我们可以更细节地处理相应的错误 但基本实现思想是这样的\NOf course, we can do more detailed error handling, but that's just the general idea.
Dialogue: 0,0:13:01.36,0:13:04.98,Default,,0,0,0,,这是我们从服务端收到了响应时的处理过程\NSo, this is the case where we got a response back from the server.
Dialogue: 0,0:13:04.98,0:13:07.12,Default,,0,0,0,,当然了 消息可能会丢失\NNow, of course, messages can be lost.
Dialogue: 0,0:13:07.12,0:13:10.30,Default,,0,0,0,,因此 可能出现我们没有收到服务端响应的情况\NAnd so, it might be that we don't get a response back from the server.
Dialogue: 0,0:13:10.30,0:13:14.90,Default,,0,0,0,,遇到这种情况时 举例来说 请求可以简单地等待30秒\NAnd in this case, for example, the request might just wait for 30 seconds.
Dialogue: 0,0:13:14.90,0:13:17.10,Default,,0,0,0,,如果30秒内没有收到任何响应\NAnd if it doesn't receive anything within 30 seconds,
Dialogue: 0,0:13:17.10,0:13:19.68,Default,,0,0,0,,我们会说 超时了 我们放弃了\Nit's going to say, timeout, we give up.
Dialogue: 0,0:13:20.48,0:13:23.64,Default,,0,0,0,,请求消息可能发送成功了 也可能没发送成功 我们也不知道发生了什么\NThe message might have got through or might not, we don't really know.
Dialogue: 0,0:13:23.64,0:13:25.38,Default,,0,0,0,,但我们会给你一个网络错误\NBut we're going to give you a network error.
Dialogue: 0,0:13:25.38,0:13:26.66,Default,,0,0,0,,这部分代码处理的就是这种情况\NAnd that's what happens here.
Dialogue: 0,0:13:26.66,0:13:31.76,Default,,0,0,0,,catch分支内 我们有另一个回调函数\NSo, in this catch case here, we have another callback function
Dialogue: 0,0:13:31.76,0:13:37.38,Default,,0,0,0,,如果网络请求未能从服务端收到响应 就会进入到catch分支\Nwhich gets called if the network request did not result in a response from the server.
Dialogue: 0,0:13:37.38,0:13:41.02,Default,,0,0,0,,这种情况下 我们也会调用failure函数 并把错误信息传进去\NAnd in that case, I'm just going to call that failure function again and pass the error in.
Dialogue: 0,0:13:41.02,0:13:42.88,Default,,0,0,0,,实际中 你可能希望\NIn practice, you would probably want to
Dialogue: 0,0:13:42.88,0:13:46.42,Default,,0,0,0,,给用户展示一条消息 向用户解释可能出现了一些错误\Nshow the user a message and explain that something went wrong.
Dialogue: 0,0:13:46.42,0:13:50.80,Default,,0,0,0,,这就是RPC的基本使用方法\NAnyway, so, this is the basics of how you would do RPC.
Dialogue: 0,0:13:51.30,0:13:56.58,Default,,0,0,0,,这就是如何应用JavaScript 即通过HTTP协议使用REST API\NAnd this is how you would use a REST API over HTTP in JavaScript.
Dialogue: 0,0:13:56.58,0:14:01.46,Default,,0,0,0,,我前面也说过 这种网页浏览器应用范式非常流行\NAnd this pattern has become very popular, as I said, for web browsers.
Dialogue: 0,0:14:01.46,0:14:04.76,Default,,0,0,0,,很多网站都使用此类技术\NAnd most websites now will use this kind of technique
Dialogue: 0,0:14:04.76,0:14:08.88,Default,,0,0,0,,在不需要重载整个页面 就可以构建HTTP请求\Nto make HTTP requests to the server without reloading the whole page.
Dialogue: 0,0:14:08.88,0:14:11.40,Default,,0,0,0,,我们只是在网页浏览器里运行JavaScript\NAnd so, it's just JavaScript running in your web browser
Dialogue: 0,0:14:11.40,0:14:16.44,Default,,0,0,0,,让网页浏览器像客户端应用那样构建并发送网络请求\Nthat acts like a client-side program, which is performing these network requests.
Dialogue: 0,0:14:17.12,0:14:22.24,Default,,0,0,0,,服务端与服务端通信的场景会用到与之非常相似的技术\NBut the very similar techniques are also used for server-to-server communication.
Dialogue: 0,0:14:22.24,0:14:26.98,Default,,0,0,0,,这个技术在大公司里特别受欢迎\NAnd so, this technique is particularly popular in large companies.
Dialogue: 0,0:14:26.98,0:14:30.96,Default,,0,0,0,,在大型企业中 我们有很多巨大的软件系统\NSo, in large enterprises, you have these huge software systems,
Dialogue: 0,0:14:30.96,0:14:34.56,Default,,0,0,0,,它们在执行公司运转所需的各种操作\Nwhich are running all of the operations of the company.
Dialogue: 0,0:14:34.56,0:14:38.16,Default,,0,0,0,,这些软件系统非常庞大、非常复杂\NAnd these software systems are far too big and far too complex
Dialogue: 0,0:14:38.16,0:14:41.16,Default,,0,0,0,,单台计算机上运行的程序完全无法支撑这样复杂的软件\Nto have just like a single program running on one computer.
Dialogue: 0,0:14:41.16,0:14:44.70,Default,,0,0,0,,只是因为程序过于复杂\NSo, simply because of the sheer complexity,
Dialogue: 0,0:14:44.70,0:14:48.54,Default,,0,0,0,,有时也因为这些系统要处理的数据过于庞大\Nsometimes also because the large amounts of data that these things have to process,
Dialogue: 0,0:14:49.66,0:14:51.18,Default,,0,0,0,,企业才必须使用分布式系统\Nthey are distributed systems.
Dialogue: 0,0:14:51.18,0:14:54.66,Default,,0,0,0,,为此 我们要在多台计算机上运行多个节点\NSo, you have multiple nodes running on multiple computers
Dialogue: 0,0:14:54.66,0:15:00.08,Default,,0,0,0,,所有节点为大型组织提供基础设施服务\Nwhich are all providing part of the infrastructure of this large organization.
Dialogue: 0,0:15:00.08,0:15:02.82,Default,,0,0,0,,大型组织可以是银行、零售商等\NIt might be a bank, or a retailer, or whatever.
Dialogue: 0,0:15:02.82,0:15:12.26,Default,,0,0,0,,这一系列大型软件会被拆分为所谓的服务\NAnd this large bunch of software is broken up into what are called services,
Dialogue: 0,0:15:12.26,0:15:16.70,Default,,0,0,0,,将大型软件拆分为服务的方法\Nand an approach where you break down a large piece of software into services
Dialogue: 0,0:15:16.70,0:15:19.12,Default,,0,0,0,,称为面向服务的体系结构\Nis called a service-oriented architecture,
Dialogue: 0,0:15:19.12,0:15:23.00,Default,,0,0,0,,一个时髦的术语是微服务\Nor a more modern term is to call it microservices.
Dialogue: 0,0:15:23.00,0:15:27.40,Default,,0,0,0,,拆分的目的只是让程序运行在多个节点上\NAnd this is just having programs running on different nodes
Dialogue: 0,0:15:27.40,0:15:29.44,Default,,0,0,0,,并允许它们通过RPC通信\Nwhich communicate via RPC.
Dialogue: 0,0:15:29.44,0:15:33.14,Default,,0,0,0,,RPC在此场景下提供了关键机制\NAnd so, RPC here is the key mechanism
Dialogue: 0,0:15:33.14,0:15:37.84,Default,,0,0,0,,允许这些软件可以相互通信\Nthat allows these bits of software to interact with each other.
Dialogue: 0,0:15:37.84,0:15:41.96,Default,,0,0,0,,我后面会稍微介绍一下这类场景下是如何使用RPC的\NAnd so, I'll tell you a little bit more about RPC in these kinds of settings.
Dialogue: 0,0:15:41.96,0:15:43.60,Default,,0,0,0,,我们已经见过网页浏览器了\NSo, we've seen it in the web browser.
Dialogue: 0,0:15:43.60,0:15:47.38,Default,,0,0,0,,但这里是面向服务的体系结构\NBut here, in service-oriented architecture,
Dialogue: 0,0:15:47.38,0:15:51.68,Default,,0,0,0,,我们这里所说的服务一般都是在数据中心内运行的\Nyou're normally talking about services that are running within a data center.
Dialogue: 0,0:15:51.68,0:15:56.16,Default,,0,0,0,,它们可能在相同数据中心内的多个不同的节点上运行\NAnd so, they might be running on multiple different servers in the same data center.
Dialogue: 0,0:15:56.16,0:15:59.98,Default,,0,0,0,,一般来说 所有这些服务都依靠数据中心的网络通信\NBut generally, they are all services talking over the data center network.
Dialogue: 0,0:15:59.98,0:16:04.10,Default,,0,0,0,,这些服务并不在用户终端设备上运行\NSo, these are not services running on your end user device,
Dialogue: 0,0:16:04.10,0:16:05.66,Default,,0,0,0,,不在你的手机、笔记本电脑上运行\Nlike your phone or your laptop,
Dialogue: 0,0:16:05.66,0:16:07.76,Default,,0,0,0,,它们是数据中心侧的服务\Nbut they are data center site services.
Dialogue: 0,0:16:07.76,0:16:11.70,Default,,0,0,0,,不过 RPC的使用过程不变\NBut we can use RPC equally well regardless of
Dialogue: 0,0:16:11.70,0:16:17.56,Default,,0,0,0,,无论是终端用户与服务端通信 还是服务端与服务端通信 使用过程是一致的\Nwhether it's like end user devices talking to a server or servers talking to other servers.
Dialogue: 0,0:16:17.56,0:16:22.30,Default,,0,0,0,,这些大型企业系统中的软件会存在一个问题\NWhat you do get in these large-scale enterprise systems is that
Dialogue: 0,0:16:22.30,0:16:24.58,Default,,0,0,0,,软件会使用一大堆不同的编程语言开发\Nthey use a whole bunch of different programming languages,
Dialogue: 0,0:16:24.58,0:16:26.56,Default,,0,0,0,,因为内部可能会有一些旧系统\Nbecause they have some old systems,
Dialogue: 0,0:16:26.56,0:16:28.98,Default,,0,0,0,,有些旧系统可能是用COBOL写的\Nthey might have some old systems written in COBOL,
Dialogue: 0,0:16:28.98,0:16:31.76,Default,,0,0,0,,稍微新一点的系统可能是用C++写的\Nthen they'll have some slightly newer systems written in C++,
Dialogue: 0,0:16:31.76,0:16:34.24,Default,,0,0,0,,新开发的一些系统可能使用Java写的\Nand have a bit newer systems written in Java,
Dialogue: 0,0:16:34.24,0:16:35.68,Default,,0,0,0,,还有很多最新开发的一些系统\Nand then they'll have the latest systems
Dialogue: 0,0:16:35.68,0:16:39.54,Default,,0,0,0,,它们可能是用当前最流行的编程语言开发的\Nin whatever is the latest most fashionable programming language right now.
Dialogue: 0,0:16:39.54,0:16:42.14,Default,,0,0,0,,这些系统需要相互通信\NAnd these systems need to talk to each other.
Dialogue: 0,0:16:42.14,0:16:45.74,Default,,0,0,0,,因此 RPC可以提供一种机制\NAnd so, RPC can actually provide a mechanism
Dialogue: 0,0:16:45.74,0:16:50.46,Default,,0,0,0,,允许由不同编程语言实现的系统进行交互\Nfor interoperability between these systems written in different programming languages.
Dialogue: 0,0:16:50.46,0:16:55.70,Default,,0,0,0,,这意味着 如果函数调用方和函数被调用方的代码\NNow, this does mean that if the function caller and the code being called,
Dialogue: 0,0:16:55.70,0:16:57.84,Default,,0,0,0,,是用不同的编程语言实现的\Nif they're written in different programming languages,
Dialogue: 0,0:16:57.84,0:17:00.98,Default,,0,0,0,,你就需要保证函数的类型签名是互相匹配的\Nyou now have to make sure that the type signatures will match up somehow.
Dialogue: 0,0:17:00.98,0:17:04.28,Default,,0,0,0,,为此 你需要进行一些数据类型转换操作\NAnd so, you have to perform some data type conversion.
Dialogue: 0,0:17:04.28,0:17:08.52,Default,,0,0,0,,实现这一功能的方法一般是使用\NAnd so, this is often implemented using something called
Dialogue: 0,0:17:08.90,0:17:11.64,Default,,0,0,0,,接口定义语言（IDL）\Ninterface definition language, or an IDL,
Dialogue: 0,0:17:11.64,0:17:16.84,Default,,0,0,0,,接口定义语言本质上是描述调用函数类型签名的一种语言\Nwhich is essentially a language for specifying the type signature or function calls
Dialogue: 0,0:17:16.84,0:17:20.12,Default,,0,0,0,,使类型签名的描述方法与具体的编程语言无关\Nin a way that is not specific to any one programming language.
Dialogue: 0,0:17:20.12,0:17:22.86,Default,,0,0,0,,这里给出了IDL的一个例子\NSo, here's one example of what an IDL looks like.
Dialogue: 0,0:17:22.86,0:17:26.42,Default,,0,0,0,,这个例子来自于gRPC 也就是谷歌的RPC框架\NThis example is taken from gRPC, the google RPC framework.
Dialogue: 0,0:17:26.42,0:17:29.30,Default,,0,0,0,,这里使用的IDL叫Protocol Buffers\NIt uses an IDL called Protocol Buffers.
Dialogue: 0,0:17:29.30,0:17:30.74,Default,,0,0,0,,具体细节并不重要\NThe details are not important.
Dialogue: 0,0:17:30.74,0:17:33.74,Default,,0,0,0,,我只是想让大家看看IDL长什么样子\NI just want to give you a bit of a flavor for what this looks like.
Dialogue: 0,0:17:33.74,0:17:38.80,Default,,0,0,0,,大家可以看到 我们在这个例子中定义了一系列不同的消息\NAnd so, what you have here is you can have a specification of a message type.
Dialogue: 0,0:17:38.80,0:17:42.14,Default,,0,0,0,,我们定义了支付请求消息和支付状态消息\NSo, we can have a payment request message and a payment status message.
Dialogue: 0,0:17:42.14,0:17:44.00,Default,,0,0,0,,这是两种不同的消息类型\NThose are two different messages type.
Dialogue: 0,0:17:44.00,0:17:47.46,Default,,0,0,0,,我们在下面这里定义了服务\NAnd then, down here, we have the specification of a service.
Dialogue: 0,0:17:47.46,0:17:51.94,Default,,0,0,0,,PaymentService是一个RPC 提供了一个RPC函数调用\NSo, the PaymentService has an RPC, offers an RPC function call
Dialogue: 0,0:17:51.94,0:17:53.80,Default,,0,0,0,,函数名是ProcessPayment\Nwhich is called ProcessPayment.
Dialogue: 0,0:17:53.80,0:18:00.30,Default,,0,0,0,,此函数以PaymentRequest为输入 返回值的类型为PaymentStatus\NIt takes as argument a PaymentRequest, and it returns as its return value PaymentStatus.
Dialogue: 0,0:18:00.30,0:18:03.96,Default,,0,0,0,,上面这里 我们描述了PaymentRequest所包含的内容\NAnd then, up here, we can say what does a PaymentRequest consist of.
Dialogue: 0,0:18:03.96,0:18:07.78,Default,,0,0,0,,PaymentRequest请求由card、amount和currency组成\NWell, a PaymentRequest consists of a card, an amount, and a currency.
Dialogue: 0,0:18:07.78,0:18:10.98,Default,,0,0,0,,Card中包含一个信用卡号（cardNumber）\NAnd the card in turn consists of a card number (cardNumber),
Dialogue: 0,0:18:10.98,0:18:12.40,Default,,0,0,0,,有效期（expiryMonth和expiryYear）\Nand expiry date (expiryMonth, expiryYear),
Dialogue: 0,0:18:12.40,0:18:14.24,Default,,0,0,0,,以及卡背后的3个数字（CVC）\Nand the 3 digits (CVC)on the back.
Dialogue: 0,0:18:14.24,0:18:18.30,Default,,0,0,0,,currency是一个枚举（enum）类型 标识了所有可能的取值\NAnd the currency might be an enum, indicating the possible values.
Dialogue: 0,0:18:18.30,0:18:20.92,Default,,0,0,0,,忽略这里的1、2、3、4\NIgnore those 1, 2, 3, 4 values here.
Dialogue: 0,0:18:21.42,0:18:25.34,Default,,0,0,0,,为什么这里要使用这些数字与本课程的内容关系不大\NAnd the details of that are not important for the purposes of this course.
Dialogue: 0,0:18:26.24,0:18:29.08,Default,,0,0,0,,但大家可以看到 我使用了一些数据类型\NBut you can see here I'm using data types
Dialogue: 0,0:18:29.08,0:18:34.18,Default,,0,0,0,,这里的int32表示这是一个32比特有符号整数\Nlike int32 to indicate this is a 32-bit signed integer.
Dialogue: 0,0:18:34.18,0:18:37.66,Default,,0,0,0,,这些是非常通用的数据类型\NAnd that is like a fairly generic data type
Dialogue: 0,0:18:37.66,0:18:41.10,Default,,0,0,0,,你可以认为大多数编程语言都支持这些数据类型\Nthat you would expect most programming languages to support that kind of thing.
Dialogue: 0,0:18:41.10,0:18:44.18,Default,,0,0,0,,类似地 字符串（string）是一种非常常见的数据类型\NLikewise, here, string data type is very common.
Dialogue: 0,0:18:44.58,0:18:46.90,Default,,0,0,0,,对于枚举类型（enum） 如果编程语言不支持枚举类型\NAn enum, if the language doesn't support enum,
Dialogue: 0,0:18:46.90,0:18:49.74,Default,,0,0,0,,你可以把枚举类型转换为整数或者其他数据类型\Nyou could translate it into just an integer or something like that.
Dialogue: 0,0:18:49.74,0:18:51.58,Default,,0,0,0,,布尔（bool）也是一个非常常见的数据类型\NBoolean (bool) again is a common data type.
Dialogue: 0,0:18:51.58,0:18:54.70,Default,,0,0,0,,你可以争论到 cardNumber应该使用string类型\NSo, you can argue should the cardNumber be a string
Dialogue: 0,0:18:54.70,0:18:59.64,Default,,0,0,0,,还是应该使用能容纳足够数字（如容纳16个数字）的整数类型\Nor should be an integer with sufficient digits that you can have, 16 digits.
Dialogue: 0,0:18:59.64,0:19:02.64,Default,,0,0,0,,我们可以讨论这个问题 但这里的目的是让大家了解一般性规则\NWhatever, we can argue about that, but you get the general principle.
Dialogue: 0,0:19:02.64,0:19:07.86,Default,,0,0,0,,这是一个与编程语言无关的RPC格式规范\NThis is a language independent specification of what the RPC can look like.
Dialogue: 0,0:19:07.86,0:19:13.18,Default,,0,0,0,,可以为RPC框架配置IDL 配置格式规范\NAnd the RPC framework can take this IDL, can take a specification,
Dialogue: 0,0:19:13.18,0:19:17.74,Default,,0,0,0,,它就可以根据格式规范为你喜欢的任何编程语言生成代码\Nand generate code in all of your favorite programming languages.
Dialogue: 0,0:19:17.74,0:19:19.68,Default,,0,0,0,,基于此\NAnd so, that way, then,
Dialogue: 0,0:19:19.68,0:19:24.02,Default,,0,0,0,,RPC框架就可以为RPC客户端和RPC服务端生成桩函数\Nit can generate the stubs for both the RPC client and the RPC server
Dialogue: 0,0:19:24.02,0:19:27.92,Default,,0,0,0,,让我们很方便地为调用方和服务端被调用方\Nthat make it easy to write code that performs the RPC
Dialogue: 0,0:19:27.92,0:19:32.38,Default,,0,0,0,,撰写执行RPC的代码\Non both the caller side and the side of the service that's being called.
Dialogue: 0,0:19:32.38,0:19:34.44,Default,,0,0,0,,这就是RPC\NSo, that's RPC.
Dialogue: 0,0:19:34.44,0:19:37.86,Default,,0,0,0,,接下来 我们将稍微讨论\NNext time, we will talk a bit more about
Dialogue: 0,0:19:37.86,0:19:43.22,Default,,0,0,0,,实现可靠分布式系统时所需面对的关键问题\Nthe fundamental issues of actually making reliable distributed systems.
